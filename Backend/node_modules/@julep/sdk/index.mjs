// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var _a;
import * as qs from "./internal/qs/index.mjs";
import * as Core from "./core.mjs";
import * as Errors from "./error.mjs";
import * as Pagination from "./pagination.mjs";
import * as Uploads from "./uploads.mjs";
import * as API from "./resources/index.mjs";
import { Docs } from "./resources/docs.mjs";
import { Files } from "./resources/files.mjs";
import { Jobs } from "./resources/jobs.mjs";
import { Sessions, SessionsOffsetPagination, } from "./resources/sessions.mjs";
import { Tasks, TasksOffsetPagination, } from "./resources/tasks.mjs";
import { Agents, AgentsOffsetPagination, } from "./resources/agents/agents.mjs";
import { Executions, ExecutionsOffsetPagination, } from "./resources/executions/executions.mjs";
import { Users, UsersOffsetPagination, } from "./resources/users/users.mjs";
const environments = {
    production: 'https://api.julep.ai/api',
    dev: 'https://dev.julep.ai/api',
    local_multi_tenant: 'http://localhost/api',
    local: 'http://localhost:8080',
};
/**
 * API Client for interfacing with the Julep API.
 */
export class Julep extends Core.APIClient {
    /**
     * API Client for interfacing with the Julep API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['JULEP_API_KEY'] ?? undefined]
     * @param {Environment} [opts.environment=production] - Specifies the environment URL to use for the API.
     * @param {string} [opts.baseURL=process.env['JULEP_BASE_URL'] ?? https://api.julep.ai/api] - Override the default base URL for the API.
     * @param {number} [opts.timeout=2 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=5] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('JULEP_BASE_URL'), apiKey = Core.readEnv('JULEP_API_KEY'), ...opts } = {}) {
        if (apiKey === undefined) {
            throw new Errors.JulepError("The JULEP_API_KEY environment variable is missing or empty; either provide it, or instantiate the Julep client with an apiKey option, like new Julep({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            ...opts,
            baseURL,
            environment: opts.environment ?? 'production',
        };
        if (baseURL && opts.environment) {
            throw new Errors.JulepError('Ambiguous URL; The `baseURL` option (or JULEP_BASE_URL env var) and the `environment` option are given. If you want to use the environment you must pass baseURL: null');
        }
        super({
            baseURL: options.baseURL || environments[options.environment || 'production'],
            timeout: options.timeout ?? 120000 /* 2 minutes */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.agents = new API.Agents(this);
        this.files = new API.Files(this);
        this.sessions = new API.Sessions(this);
        this.users = new API.Users(this);
        this.jobs = new API.Jobs(this);
        this.docs = new API.Docs(this);
        this.tasks = new API.Tasks(this);
        this.executions = new API.Executions(this);
        this._options = options;
        this.apiKey = apiKey;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
    stringifyQuery(query) {
        return qs.stringify(query, { allowDots: true, arrayFormat: 'repeat' });
    }
}
_a = Julep;
Julep.Julep = _a;
Julep.DEFAULT_TIMEOUT = 120000; // 2 minutes
Julep.JulepError = Errors.JulepError;
Julep.APIError = Errors.APIError;
Julep.APIConnectionError = Errors.APIConnectionError;
Julep.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Julep.APIUserAbortError = Errors.APIUserAbortError;
Julep.NotFoundError = Errors.NotFoundError;
Julep.ConflictError = Errors.ConflictError;
Julep.RateLimitError = Errors.RateLimitError;
Julep.BadRequestError = Errors.BadRequestError;
Julep.AuthenticationError = Errors.AuthenticationError;
Julep.InternalServerError = Errors.InternalServerError;
Julep.PermissionDeniedError = Errors.PermissionDeniedError;
Julep.UnprocessableEntityError = Errors.UnprocessableEntityError;
Julep.toFile = Uploads.toFile;
Julep.fileFromPath = Uploads.fileFromPath;
Julep.Agents = Agents;
Julep.AgentsOffsetPagination = AgentsOffsetPagination;
Julep.Files = Files;
Julep.Sessions = Sessions;
Julep.SessionsOffsetPagination = SessionsOffsetPagination;
Julep.Users = Users;
Julep.UsersOffsetPagination = UsersOffsetPagination;
Julep.Jobs = Jobs;
Julep.Docs = Docs;
Julep.Tasks = Tasks;
Julep.TasksOffsetPagination = TasksOffsetPagination;
Julep.Executions = Executions;
Julep.ExecutionsOffsetPagination = ExecutionsOffsetPagination;
export { toFile, fileFromPath } from "./uploads.mjs";
export { JulepError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from "./error.mjs";
export default Julep;
//# sourceMappingURL=index.mjs.map