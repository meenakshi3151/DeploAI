import { APIResource } from "../../resource.js";
import * as Core from "../../core.js";
import * as Shared from "../shared.js";
import * as DocsAPI from "./docs.js";
import { DocCreateParams, DocListParams, DocSearchParams, DocSearchResponse, Docs } from "./docs.js";
import { OffsetPagination, type OffsetPaginationParams } from "../../pagination.js";
export declare class Users extends APIResource {
    docs: DocsAPI.Docs;
    /**
     * Create User
     */
    create(body: UserCreateParams, options?: Core.RequestOptions): Core.APIPromise<User>;
    /**
     * Patch User
     */
    update(userId: string, body: UserUpdateParams, options?: Core.RequestOptions): Core.APIPromise<User>;
    /**
     * List Users
     */
    list(query?: UserListParams, options?: Core.RequestOptions): Core.PagePromise<UsersOffsetPagination, User>;
    list(options?: Core.RequestOptions): Core.PagePromise<UsersOffsetPagination, User>;
    /**
     * Delete User
     */
    delete(userId: string, options?: Core.RequestOptions): Core.APIPromise<Shared.ResourceDeleted>;
    /**
     * Create Or Update User
     */
    createOrUpdate(userId: string, body: UserCreateOrUpdateParams, options?: Core.RequestOptions): Core.APIPromise<User>;
    /**
     * Get User Details
     */
    get(userId: string, options?: Core.RequestOptions): Core.APIPromise<User>;
    /**
     * Update User
     */
    reset(userId: string, body: UserResetParams, options?: Core.RequestOptions): Core.APIPromise<User>;
}
export declare class UsersOffsetPagination extends OffsetPagination<User> {
}
export interface User {
    id: string;
    created_at: string;
    updated_at: string;
    about?: string;
    metadata?: unknown | null;
    name?: string;
}
export interface UserCreateParams {
    about?: string;
    metadata?: unknown | null;
    name?: string;
}
export interface UserUpdateParams {
    about?: string;
    metadata?: unknown | null;
    name?: string;
}
export interface UserListParams extends OffsetPaginationParams {
    direction?: 'asc' | 'desc';
    metadata_filter?: Record<string, unknown>;
    sort_by?: 'created_at' | 'updated_at';
}
export interface UserCreateOrUpdateParams {
    about?: string;
    metadata?: unknown | null;
    name?: string;
}
export interface UserResetParams {
    about?: string;
    metadata?: unknown | null;
    name?: string;
}
export declare namespace Users {
    export { type User as User, UsersOffsetPagination as UsersOffsetPagination, type UserCreateParams as UserCreateParams, type UserUpdateParams as UserUpdateParams, type UserListParams as UserListParams, type UserCreateOrUpdateParams as UserCreateOrUpdateParams, type UserResetParams as UserResetParams, };
    export { Docs as Docs, type DocSearchResponse as DocSearchResponse, type DocCreateParams as DocCreateParams, type DocListParams as DocListParams, type DocSearchParams as DocSearchParams, };
}
//# sourceMappingURL=users.d.ts.map