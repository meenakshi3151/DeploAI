import { APIResource } from "../../resource.js";
import * as Core from "../../core.js";
import * as DocsAPI from "../docs.js";
import { DocsOffsetPagination } from "../docs.js";
import * as Shared from "../shared.js";
import { type OffsetPaginationParams } from "../../pagination.js";
export declare class Docs extends APIResource {
    /**
     * Creates a new document for a user.
     *
     * Parameters: user_id (UUID): The unique identifier of the user associated with
     * the document. data (CreateDocRequest): The data to create the document with.
     * x_developer_id (UUID): The unique identifier of the developer associated with
     * the document.
     *
     * Returns: Doc: The created document.
     */
    create(userId: string, params: DocCreateParams, options?: Core.RequestOptions): Core.APIPromise<DocsAPI.Doc>;
    /**
     * List User Docs
     */
    list(userId: string, query?: DocListParams, options?: Core.RequestOptions): Core.PagePromise<DocsOffsetPagination, DocsAPI.Doc>;
    list(userId: string, options?: Core.RequestOptions): Core.PagePromise<DocsOffsetPagination, DocsAPI.Doc>;
    /**
     * Delete User Doc
     */
    delete(userId: string, docId: string, options?: Core.RequestOptions): Core.APIPromise<Shared.ResourceDeleted>;
    /**
     * Searches for documents associated with a specific user.
     *
     * Parameters: x_developer_id (UUID): The unique identifier of the developer
     * associated with the user. search_params (TextOnlyDocSearchRequest |
     * VectorDocSearchRequest | HybridDocSearchRequest): The parameters for the search.
     * user_id (UUID): The unique identifier of the user associated with the documents.
     *
     * Returns: DocSearchResponse: The search results.
     */
    search(userId: string, params: DocSearchParams, options?: Core.RequestOptions): Core.APIPromise<DocSearchResponse>;
}
export interface DocSearchResponse {
    docs: Array<DocSearchResponse.Doc>;
    time: number;
}
export declare namespace DocSearchResponse {
    interface Doc {
        id: string;
        owner: Doc.Owner;
        snippet: DocsAPI.Snippet;
        distance?: number | null;
        metadata?: unknown | null;
        title?: string | null;
    }
    namespace Doc {
        interface Owner {
            id: string;
            role: 'user' | 'agent';
        }
    }
}
export interface DocCreateParams {
    /**
     * Body param:
     */
    content: string | Array<string>;
    /**
     * Body param:
     */
    title: string;
    /**
     * Query param:
     */
    connection_pool?: unknown;
    /**
     * Body param:
     */
    embed_instruction?: string | null;
    /**
     * Body param:
     */
    metadata?: unknown | null;
}
export interface DocListParams extends OffsetPaginationParams {
    direction?: 'asc' | 'desc';
    metadata_filter?: Record<string, unknown>;
    sort_by?: 'created_at' | 'updated_at';
}
export type DocSearchParams = DocSearchParams.TextOnlyDocSearchRequest | DocSearchParams.VectorDocSearchRequest | DocSearchParams.HybridDocSearchRequest;
export declare namespace DocSearchParams {
    interface TextOnlyDocSearchRequest {
        /**
         * Body param:
         */
        text: string;
        /**
         * Query param:
         */
        connection_pool?: unknown;
        /**
         * Body param:
         */
        lang?: string;
        /**
         * Body param:
         */
        limit?: number;
        /**
         * Body param:
         */
        metadata_filter?: unknown;
    }
    interface VectorDocSearchRequest {
        /**
         * Body param:
         */
        vector: Array<number>;
        /**
         * Query param:
         */
        connection_pool?: unknown;
        /**
         * Body param:
         */
        confidence?: number;
        /**
         * Body param:
         */
        lang?: string;
        /**
         * Body param:
         */
        limit?: number;
        /**
         * Body param:
         */
        metadata_filter?: unknown;
        /**
         * Body param:
         */
        mmr_strength?: number;
    }
    interface HybridDocSearchRequest {
        /**
         * Body param:
         */
        text: string;
        /**
         * Body param:
         */
        vector: Array<number>;
        /**
         * Query param:
         */
        connection_pool?: unknown;
        /**
         * Body param:
         */
        alpha?: number;
        /**
         * Body param:
         */
        confidence?: number;
        /**
         * Body param:
         */
        lang?: string;
        /**
         * Body param:
         */
        limit?: number;
        /**
         * Body param:
         */
        metadata_filter?: unknown;
        /**
         * Body param:
         */
        mmr_strength?: number;
    }
}
export declare namespace Docs {
    export { type DocSearchResponse as DocSearchResponse, type DocCreateParams as DocCreateParams, type DocListParams as DocListParams, type DocSearchParams as DocSearchParams, };
}
export { DocsOffsetPagination };
//# sourceMappingURL=docs.d.ts.map