import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import * as DocsAPI from "./docs.js";
import * as Shared from "./shared.js";
import { OffsetPagination, type OffsetPaginationParams } from "../pagination.js";
export declare class Sessions extends APIResource {
    /**
     * Create Session
     */
    create(body: SessionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Session>;
    /**
     * Patch Session
     */
    update(sessionId: string, body: SessionUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Session>;
    /**
     * List Sessions
     */
    list(query?: SessionListParams, options?: Core.RequestOptions): Core.PagePromise<SessionsOffsetPagination, Session>;
    list(options?: Core.RequestOptions): Core.PagePromise<SessionsOffsetPagination, Session>;
    /**
     * Delete Session
     */
    delete(sessionId: string, options?: Core.RequestOptions): Core.APIPromise<Shared.ResourceDeleted>;
    /**
     * Initiates a chat session.
     *
     * Parameters: developer (Developer): The developer associated with the chat
     * session. session_id (UUID): The unique identifier of the chat session.
     * chat_input (ChatInput): The chat input data. background_tasks (BackgroundTasks):
     * The background tasks to run. x_custom_api_key (Optional[str]): The custom API
     * key.
     *
     * Returns: ChatResponse: The chat response.
     */
    chat(sessionId: string, params: SessionChatParams, options?: Core.RequestOptions): Core.APIPromise<SessionChatResponse>;
    /**
     * Create Or Update Session
     */
    createOrUpdate(sessionId: string, body: SessionCreateOrUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Session>;
    /**
     * Get Session
     */
    get(sessionId: string, options?: Core.RequestOptions): Core.APIPromise<Session>;
    /**
     * Get Session History
     */
    history(sessionId: string, options?: Core.RequestOptions): Core.APIPromise<History>;
    /**
     * Renders a chat input.
     *
     * Parameters: developer (Developer): The developer associated with the chat
     * session. session_id (UUID): The unique identifier of the chat session.
     * chat_input (ChatInput): The chat input data.
     *
     * Returns: RenderResponse: The rendered chat input.
     */
    render(sessionId: string, body: SessionRenderParams, options?: Core.RequestOptions): Core.APIPromise<SessionRenderResponse>;
    /**
     * Update Session
     */
    reset(sessionId: string, body: SessionResetParams, options?: Core.RequestOptions): Core.APIPromise<Session>;
}
export declare class SessionsOffsetPagination extends OffsetPagination<Session> {
}
export interface ChatInput {
    messages: Array<ChatInput.Message>;
    agent?: string | null;
    frequency_penalty?: number | null;
    length_penalty?: number | null;
    logit_bias?: Record<string, number> | null;
    max_tokens?: number | null;
    min_p?: number | null;
    model?: string | null;
    presence_penalty?: number | null;
    recall?: boolean;
    remember?: boolean;
    repetition_penalty?: number | null;
    response_format?: ChatInput.SimpleCompletionResponseFormat | ChatInput.SchemaCompletionResponseFormat | null;
    save?: boolean;
    seed?: number | null;
    stop?: Array<string>;
    stream?: boolean;
    temperature?: number | null;
    tool_choice?: 'auto' | 'none' | ChatInput.NamedToolChoice | null;
    tools?: Array<ChatInput.Tool> | null;
    top_p?: number | null;
}
export declare namespace ChatInput {
    interface Message {
        role: 'user' | 'assistant' | 'system' | 'tool';
        content?: string | Array<string> | Array<Message.Content | Message.ContentModel7 | Message.AgentsAPIAutogenChatContentModelInput> | null;
        continue?: boolean | null;
        name?: string | null;
        tool_call_id?: string | null;
        tool_calls?: Array<Message.ChosenFunctionCall | Message.ChosenComputer20241022 | Message.ChosenTextEditor20241022 | Message.ChosenBash20241022> | null;
    }
    namespace Message {
        interface Content {
            text: string;
            type?: 'text';
        }
        interface ContentModel7 {
            /**
             * The image URL
             */
            image_url: ContentModel7.ImageURL;
            type?: 'image_url';
        }
        namespace ContentModel7 {
            /**
             * The image URL
             */
            interface ImageURL {
                url: string;
                detail?: 'low' | 'high' | 'auto';
            }
        }
        /**
         * Anthropic image content part
         */
        interface AgentsAPIAutogenChatContentModelInput {
            content: Array<AgentsAPIAutogenChatContentModelInput.UnionMember0> | Array<AgentsAPIAutogenChatContentModelInput.UnionMember1>;
            tool_use_id: string;
            type?: 'tool_result';
        }
        namespace AgentsAPIAutogenChatContentModelInput {
            interface UnionMember0 {
                text: string;
                type?: 'text';
            }
            interface UnionMember1 {
                source: UnionMember1.Source;
                type?: 'image';
            }
            namespace UnionMember1 {
                interface Source {
                    data: string;
                    media_type: string;
                    type?: 'base64';
                }
            }
        }
        interface ChosenFunctionCall {
            function: ChosenFunctionCall.Function;
            id?: string | null;
            api_call?: unknown;
            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
            integration?: unknown;
            system?: unknown;
            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
            type?: 'function';
        }
        namespace ChosenFunctionCall {
            interface Function {
                name: string;
                arguments?: string | null;
            }
            interface Bash20241022 {
                command?: string | null;
                restart?: boolean;
            }
            interface Computer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface TextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
        }
        interface ChosenComputer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface ChosenTextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
        interface ChosenBash20241022 {
            command?: string | null;
            restart?: boolean;
        }
    }
    interface SimpleCompletionResponseFormat {
        type?: 'text' | 'json_object';
    }
    interface SchemaCompletionResponseFormat {
        json_schema: unknown;
        type?: 'json_schema';
    }
    interface NamedToolChoice {
        function?: NamedToolChoice.Function | null;
    }
    namespace NamedToolChoice {
        interface Function {
            name: string;
            arguments?: string | null;
        }
    }
    /**
     * Payload for creating a tool
     */
    interface Tool {
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
}
export interface ChatResponse {
    id: string;
    choices: Array<ChatResponse.SingleChatOutput | ChatResponse.MultipleChatOutput>;
    created_at: string;
    docs?: Array<ChatResponse.Doc>;
    jobs?: Array<string>;
    /**
     * Usage statistics for the completion request
     */
    usage?: ChatResponse.Usage | null;
}
export declare namespace ChatResponse {
    /**
     * The output returned by the model. Note that, depending on the model provider,
     * they might return more than one message.
     */
    interface SingleChatOutput {
        index: number;
        message: SingleChatOutput.Message;
        finish_reason?: 'stop' | 'length' | 'content_filter' | 'tool_calls';
        logprobs?: SingleChatOutput.Logprobs | null;
        tool_calls?: Array<SingleChatOutput.ChosenFunctionCall | SingleChatOutput.ChosenComputer20241022 | SingleChatOutput.ChosenTextEditor20241022 | SingleChatOutput.ChosenBash20241022> | null;
    }
    namespace SingleChatOutput {
        interface Message {
            role: 'user' | 'assistant' | 'system' | 'tool';
            id?: string | null;
            content?: string | Array<string> | Array<Message.AgentsAPIAutogenChatContentModel3 | Message.ContentModel7 | Message.ContentModel4> | null;
            created_at?: string | null;
            name?: string | null;
            tool_call_id?: string | null;
            tool_calls?: Array<Message.ChosenFunctionCall | Message.ChosenComputer20241022 | Message.ChosenTextEditor20241022 | Message.ChosenBash20241022> | null;
        }
        namespace Message {
            interface AgentsAPIAutogenChatContentModel3 {
                text: string;
                type?: 'text';
            }
            interface ContentModel7 {
                /**
                 * The image URL
                 */
                image_url: ContentModel7.ImageURL;
                type?: 'image_url';
            }
            namespace ContentModel7 {
                /**
                 * The image URL
                 */
                interface ImageURL {
                    url: string;
                    detail?: 'low' | 'high' | 'auto';
                }
            }
            /**
             * Anthropic image content part
             */
            interface ContentModel4 {
                content: Array<ContentModel4.UnionMember0> | Array<ContentModel4.UnionMember1>;
                tool_use_id: string;
                type?: 'tool_result';
            }
            namespace ContentModel4 {
                interface UnionMember0 {
                    text: string;
                    type?: 'text';
                }
                interface UnionMember1 {
                    source: UnionMember1.Source;
                    type?: 'image';
                }
                namespace UnionMember1 {
                    interface Source {
                        data: string;
                        media_type: string;
                        type?: 'base64';
                    }
                }
            }
            interface ChosenFunctionCall {
                function: ChosenFunctionCall.Function;
                id?: string | null;
                api_call?: unknown;
                bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                integration?: unknown;
                system?: unknown;
                text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                type?: 'function';
            }
            namespace ChosenFunctionCall {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
                interface Bash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
                interface Computer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface TextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
            }
            interface ChosenComputer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface ChosenTextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
            interface ChosenBash20241022 {
                command?: string | null;
                restart?: boolean;
            }
        }
        interface Logprobs {
            content: Array<Logprobs.Content> | null;
        }
        namespace Logprobs {
            interface Content {
                token: string;
                logprob: number;
                top_logprobs: Array<Content.TopLogprob>;
                bytes?: Array<number> | null;
            }
            namespace Content {
                interface TopLogprob {
                    token: string;
                    logprob: number;
                    bytes?: Array<number> | null;
                }
            }
        }
        interface ChosenFunctionCall {
            function: ChosenFunctionCall.Function;
            id?: string | null;
            api_call?: unknown;
            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
            integration?: unknown;
            system?: unknown;
            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
            type?: 'function';
        }
        namespace ChosenFunctionCall {
            interface Function {
                name: string;
                arguments?: string | null;
            }
            interface Bash20241022 {
                command?: string | null;
                restart?: boolean;
            }
            interface Computer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface TextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
        }
        interface ChosenComputer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface ChosenTextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
        interface ChosenBash20241022 {
            command?: string | null;
            restart?: boolean;
        }
    }
    /**
     * The output returned by the model. Note that, depending on the model provider,
     * they might return more than one message.
     */
    interface MultipleChatOutput {
        index: number;
        messages: Array<MultipleChatOutput.Message>;
        finish_reason?: 'stop' | 'length' | 'content_filter' | 'tool_calls';
        logprobs?: MultipleChatOutput.Logprobs | null;
        tool_calls?: Array<MultipleChatOutput.ChosenFunctionCall | MultipleChatOutput.ChosenComputer20241022 | MultipleChatOutput.ChosenTextEditor20241022 | MultipleChatOutput.ChosenBash20241022> | null;
    }
    namespace MultipleChatOutput {
        interface Message {
            role: 'user' | 'assistant' | 'system' | 'tool';
            id?: string | null;
            content?: string | Array<string> | Array<Message.AgentsAPIAutogenChatContentModel3 | Message.ContentModel7 | Message.ContentModel4> | null;
            created_at?: string | null;
            name?: string | null;
            tool_call_id?: string | null;
            tool_calls?: Array<Message.ChosenFunctionCall | Message.ChosenComputer20241022 | Message.ChosenTextEditor20241022 | Message.ChosenBash20241022> | null;
        }
        namespace Message {
            interface AgentsAPIAutogenChatContentModel3 {
                text: string;
                type?: 'text';
            }
            interface ContentModel7 {
                /**
                 * The image URL
                 */
                image_url: ContentModel7.ImageURL;
                type?: 'image_url';
            }
            namespace ContentModel7 {
                /**
                 * The image URL
                 */
                interface ImageURL {
                    url: string;
                    detail?: 'low' | 'high' | 'auto';
                }
            }
            /**
             * Anthropic image content part
             */
            interface ContentModel4 {
                content: Array<ContentModel4.UnionMember0> | Array<ContentModel4.UnionMember1>;
                tool_use_id: string;
                type?: 'tool_result';
            }
            namespace ContentModel4 {
                interface UnionMember0 {
                    text: string;
                    type?: 'text';
                }
                interface UnionMember1 {
                    source: UnionMember1.Source;
                    type?: 'image';
                }
                namespace UnionMember1 {
                    interface Source {
                        data: string;
                        media_type: string;
                        type?: 'base64';
                    }
                }
            }
            interface ChosenFunctionCall {
                function: ChosenFunctionCall.Function;
                id?: string | null;
                api_call?: unknown;
                bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                integration?: unknown;
                system?: unknown;
                text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                type?: 'function';
            }
            namespace ChosenFunctionCall {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
                interface Bash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
                interface Computer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface TextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
            }
            interface ChosenComputer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface ChosenTextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
            interface ChosenBash20241022 {
                command?: string | null;
                restart?: boolean;
            }
        }
        interface Logprobs {
            content: Array<Logprobs.Content> | null;
        }
        namespace Logprobs {
            interface Content {
                token: string;
                logprob: number;
                top_logprobs: Array<Content.TopLogprob>;
                bytes?: Array<number> | null;
            }
            namespace Content {
                interface TopLogprob {
                    token: string;
                    logprob: number;
                    bytes?: Array<number> | null;
                }
            }
        }
        interface ChosenFunctionCall {
            function: ChosenFunctionCall.Function;
            id?: string | null;
            api_call?: unknown;
            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
            integration?: unknown;
            system?: unknown;
            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
            type?: 'function';
        }
        namespace ChosenFunctionCall {
            interface Function {
                name: string;
                arguments?: string | null;
            }
            interface Bash20241022 {
                command?: string | null;
                restart?: boolean;
            }
            interface Computer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface TextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
        }
        interface ChosenComputer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface ChosenTextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
        interface ChosenBash20241022 {
            command?: string | null;
            restart?: boolean;
        }
    }
    interface Doc {
        id: string;
        owner: Doc.Owner;
        snippet: DocsAPI.Snippet;
        distance?: number | null;
        metadata?: unknown | null;
        title?: string | null;
    }
    namespace Doc {
        interface Owner {
            id: string;
            role: 'user' | 'agent';
        }
    }
    /**
     * Usage statistics for the completion request
     */
    interface Usage {
        completion_tokens?: number | null;
        prompt_tokens?: number | null;
        total_tokens?: number | null;
    }
}
export interface Entry {
    id: string;
    content: Array<Entry.Content | Entry.AgentsAPIAutogenEntriesContentModel3 | Entry.AgentsAPIAutogenEntriesContentModel> | Entry.Tool | Entry.ChosenFunctionCall | Entry.ChosenComputer20241022 | Entry.ChosenTextEditor20241022 | Entry.ChosenBash20241022 | string | Entry.ToolResponse | Array<Array<Entry.AgentsAPIAutogenEntriesContentModel1 | Entry.AgentsAPIAutogenEntriesContentModel3 | Entry.AgentsAPIAutogenEntriesContentModel2> | Entry.Tool | Entry.ChosenFunctionCall | Entry.ChosenComputer20241022 | Entry.ChosenTextEditor20241022 | Entry.ChosenBash20241022 | string | Entry.ToolResponse>;
    created_at: string;
    role: 'user' | 'assistant' | 'system' | 'tool';
    source: 'api_request' | 'api_response' | 'tool_response' | 'internal' | 'summarizer' | 'meta';
    timestamp: string;
    token_count: number;
    tokenizer: string;
    model?: string;
    name?: string | null;
    tool_call_id?: string | null;
    tool_calls?: Array<Entry.ChosenFunctionCall | Entry.ChosenComputer20241022 | Entry.ChosenTextEditor20241022 | Entry.ChosenBash20241022> | null;
}
export declare namespace Entry {
    interface Content {
        text: string;
        type?: 'text';
    }
    interface AgentsAPIAutogenEntriesContentModel3 {
        /**
         * The image URL
         */
        image_url: AgentsAPIAutogenEntriesContentModel3.ImageURL;
        type?: 'image_url';
    }
    namespace AgentsAPIAutogenEntriesContentModel3 {
        /**
         * The image URL
         */
        interface ImageURL {
            url: string;
            detail?: 'low' | 'high' | 'auto';
        }
    }
    /**
     * Anthropic image content part
     */
    interface AgentsAPIAutogenEntriesContentModel {
        content: Array<AgentsAPIAutogenEntriesContentModel.UnionMember0> | Array<AgentsAPIAutogenEntriesContentModel.UnionMember1>;
        tool_use_id: string;
        type?: 'tool_result';
    }
    namespace AgentsAPIAutogenEntriesContentModel {
        interface UnionMember0 {
            text: string;
            type?: 'text';
        }
        interface UnionMember1 {
            source: UnionMember1.Source;
            type?: 'image';
        }
        namespace UnionMember1 {
            interface Source {
                data: string;
                media_type: string;
                type?: 'base64';
            }
        }
    }
    interface Tool {
        id: string;
        created_at: string;
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        updated_at: string;
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
    interface ChosenFunctionCall {
        function: ChosenFunctionCall.Function;
        id?: string | null;
        api_call?: unknown;
        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
        integration?: unknown;
        system?: unknown;
        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
        type?: 'function';
    }
    namespace ChosenFunctionCall {
        interface Function {
            name: string;
            arguments?: string | null;
        }
        interface Bash20241022 {
            command?: string | null;
            restart?: boolean;
        }
        interface Computer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface TextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
    }
    interface ChosenComputer20241022 {
        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
        coordinate?: Array<number> | null;
        text?: string | null;
    }
    interface ChosenTextEditor20241022 {
        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
        path: string;
        file_text?: string | null;
        insert_line?: number | null;
        new_str?: string | null;
        old_str?: string | null;
        view_range?: Array<number> | null;
    }
    interface ChosenBash20241022 {
        command?: string | null;
        restart?: boolean;
    }
    interface ToolResponse {
        id: string;
        output: unknown;
    }
    interface AgentsAPIAutogenEntriesContentModel1 {
        text: string;
        type?: 'text';
    }
    interface AgentsAPIAutogenEntriesContentModel3 {
        /**
         * The image URL
         */
        image_url: AgentsAPIAutogenEntriesContentModel3.ImageURL;
        type?: 'image_url';
    }
    namespace AgentsAPIAutogenEntriesContentModel3 {
        /**
         * The image URL
         */
        interface ImageURL {
            url: string;
            detail?: 'low' | 'high' | 'auto';
        }
    }
    /**
     * Anthropic image content part
     */
    interface AgentsAPIAutogenEntriesContentModel2 {
        content: Array<AgentsAPIAutogenEntriesContentModel2.UnionMember0> | Array<AgentsAPIAutogenEntriesContentModel2.UnionMember1>;
        tool_use_id: string;
        type?: 'tool_result';
    }
    namespace AgentsAPIAutogenEntriesContentModel2 {
        interface UnionMember0 {
            text: string;
            type?: 'text';
        }
        interface UnionMember1 {
            source: UnionMember1.Source;
            type?: 'image';
        }
        namespace UnionMember1 {
            interface Source {
                data: string;
                media_type: string;
                type?: 'base64';
            }
        }
    }
    interface Tool {
        id: string;
        created_at: string;
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        updated_at: string;
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
    interface ChosenFunctionCall {
        function: ChosenFunctionCall.Function;
        id?: string | null;
        api_call?: unknown;
        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
        integration?: unknown;
        system?: unknown;
        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
        type?: 'function';
    }
    namespace ChosenFunctionCall {
        interface Function {
            name: string;
            arguments?: string | null;
        }
        interface Bash20241022 {
            command?: string | null;
            restart?: boolean;
        }
        interface Computer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface TextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
    }
    interface ChosenComputer20241022 {
        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
        coordinate?: Array<number> | null;
        text?: string | null;
    }
    interface ChosenTextEditor20241022 {
        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
        path: string;
        file_text?: string | null;
        insert_line?: number | null;
        new_str?: string | null;
        old_str?: string | null;
        view_range?: Array<number> | null;
    }
    interface ChosenBash20241022 {
        command?: string | null;
        restart?: boolean;
    }
    interface ToolResponse {
        id: string;
        output: unknown;
    }
    interface ChosenFunctionCall {
        function: ChosenFunctionCall.Function;
        id?: string | null;
        api_call?: unknown;
        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
        integration?: unknown;
        system?: unknown;
        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
        type?: 'function';
    }
    namespace ChosenFunctionCall {
        interface Function {
            name: string;
            arguments?: string | null;
        }
        interface Bash20241022 {
            command?: string | null;
            restart?: boolean;
        }
        interface Computer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface TextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
    }
    interface ChosenComputer20241022 {
        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
        coordinate?: Array<number> | null;
        text?: string | null;
    }
    interface ChosenTextEditor20241022 {
        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
        path: string;
        file_text?: string | null;
        insert_line?: number | null;
        new_str?: string | null;
        old_str?: string | null;
        view_range?: Array<number> | null;
    }
    interface ChosenBash20241022 {
        command?: string | null;
        restart?: boolean;
    }
}
export interface History {
    created_at: string;
    entries: Array<Entry>;
    relations: Array<History.Relation>;
    session_id: string;
}
export declare namespace History {
    interface Relation {
        head: string;
        relation: string;
        tail: string;
    }
}
export interface Session {
    id: string;
    created_at: string;
    updated_at: string;
    auto_run_tools?: boolean;
    context_overflow?: 'truncate' | 'adaptive' | null;
    forward_tool_calls?: boolean;
    kind?: string | null;
    metadata?: unknown | null;
    recall_options?: Session.VectorDocSearch | Session.TextOnlyDocSearch | Session.HybridDocSearch | null;
    render_templates?: boolean;
    situation?: string | null;
    summary?: string | null;
    system_template?: string | null;
    token_budget?: number | null;
}
export declare namespace Session {
    interface VectorDocSearch {
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'vector';
        num_search_messages?: number;
    }
    interface TextOnlyDocSearch {
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mode?: 'text';
        num_search_messages?: number;
    }
    interface HybridDocSearch {
        alpha?: number;
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'hybrid';
        num_search_messages?: number;
    }
}
export type SessionChatResponse = SessionChatResponse.ChunkChatResponse | ChatResponse;
export declare namespace SessionChatResponse {
    interface ChunkChatResponse {
        id: string;
        choices: Array<ChunkChatResponse.Choice>;
        created_at: string;
        docs?: Array<ChunkChatResponse.Doc>;
        jobs?: Array<string>;
        /**
         * Usage statistics for the completion request
         */
        usage?: ChunkChatResponse.Usage | null;
    }
    namespace ChunkChatResponse {
        /**
         * Streaming chat completion output
         */
        interface Choice {
            /**
             * The message generated by the model
             */
            delta: Choice.Delta;
            index: number;
            finish_reason?: 'stop' | 'length' | 'content_filter' | 'tool_calls';
            logprobs?: Choice.Logprobs | null;
            tool_calls?: Array<Choice.ChosenFunctionCall | Choice.ChosenComputer20241022 | Choice.ChosenTextEditor20241022 | Choice.ChosenBash20241022> | null;
        }
        namespace Choice {
            /**
             * The message generated by the model
             */
            interface Delta {
                role: 'user' | 'assistant' | 'system' | 'tool';
                content?: string | Array<string> | Array<Delta.AgentsAPIAutogenChatContentModel1 | Delta.ContentModel7 | Delta.AgentsAPIAutogenChatContentModel2> | null;
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<Delta.ChosenFunctionCall | Delta.ChosenComputer20241022 | Delta.ChosenTextEditor20241022 | Delta.ChosenBash20241022> | null;
            }
            namespace Delta {
                interface AgentsAPIAutogenChatContentModel1 {
                    text: string;
                    type?: 'text';
                }
                interface ContentModel7 {
                    /**
                     * The image URL
                     */
                    image_url: ContentModel7.ImageURL;
                    type?: 'image_url';
                }
                namespace ContentModel7 {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface AgentsAPIAutogenChatContentModel2 {
                    content: Array<AgentsAPIAutogenChatContentModel2.UnionMember0> | Array<AgentsAPIAutogenChatContentModel2.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace AgentsAPIAutogenChatContentModel2 {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    id?: string | null;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface Logprobs {
                content: Array<Logprobs.Content> | null;
            }
            namespace Logprobs {
                interface Content {
                    token: string;
                    logprob: number;
                    top_logprobs: Array<Content.TopLogprob>;
                    bytes?: Array<number> | null;
                }
                namespace Content {
                    interface TopLogprob {
                        token: string;
                        logprob: number;
                        bytes?: Array<number> | null;
                    }
                }
            }
            interface ChosenFunctionCall {
                function: ChosenFunctionCall.Function;
                id?: string | null;
                api_call?: unknown;
                bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                integration?: unknown;
                system?: unknown;
                text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                type?: 'function';
            }
            namespace ChosenFunctionCall {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
                interface Bash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
                interface Computer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface TextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
            }
            interface ChosenComputer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface ChosenTextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
            interface ChosenBash20241022 {
                command?: string | null;
                restart?: boolean;
            }
        }
        interface Doc {
            id: string;
            owner: Doc.Owner;
            snippet: DocsAPI.Snippet;
            distance?: number | null;
            metadata?: unknown | null;
            title?: string | null;
        }
        namespace Doc {
            interface Owner {
                id: string;
                role: 'user' | 'agent';
            }
        }
        /**
         * Usage statistics for the completion request
         */
        interface Usage {
            completion_tokens?: number | null;
            prompt_tokens?: number | null;
            total_tokens?: number | null;
        }
    }
}
export interface SessionRenderResponse {
    messages: Array<SessionRenderResponse.Message>;
    docs?: Array<SessionRenderResponse.Doc>;
    tool_choice?: 'auto' | 'none' | SessionRenderResponse.NamedToolChoice | null;
    tools?: Array<SessionRenderResponse.Tool> | null;
}
export declare namespace SessionRenderResponse {
    interface Message {
        role: 'user' | 'assistant' | 'system' | 'tool';
        content?: string | Array<string> | Array<Message.Content | Message.ContentModel7 | Message.AgentsAPIAutogenChatContentModelOutput> | null;
        continue?: boolean | null;
        name?: string | null;
        tool_call_id?: string | null;
        tool_calls?: Array<Message.ChosenFunctionCall | Message.ChosenComputer20241022 | Message.ChosenTextEditor20241022 | Message.ChosenBash20241022> | null;
    }
    namespace Message {
        interface Content {
            text: string;
            type?: 'text';
        }
        interface ContentModel7 {
            /**
             * The image URL
             */
            image_url: ContentModel7.ImageURL;
            type?: 'image_url';
        }
        namespace ContentModel7 {
            /**
             * The image URL
             */
            interface ImageURL {
                url: string;
                detail?: 'low' | 'high' | 'auto';
            }
        }
        /**
         * Anthropic image content part
         */
        interface AgentsAPIAutogenChatContentModelOutput {
            content: Array<AgentsAPIAutogenChatContentModelOutput.UnionMember0> | Array<AgentsAPIAutogenChatContentModelOutput.UnionMember1>;
            tool_use_id: string;
            type?: 'tool_result';
        }
        namespace AgentsAPIAutogenChatContentModelOutput {
            interface UnionMember0 {
                text: string;
                type?: 'text';
            }
            interface UnionMember1 {
                source: UnionMember1.Source;
                type?: 'image';
            }
            namespace UnionMember1 {
                interface Source {
                    data: string;
                    media_type: string;
                    type?: 'base64';
                }
            }
        }
        interface ChosenFunctionCall {
            function: ChosenFunctionCall.Function;
            id?: string | null;
            api_call?: unknown;
            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
            integration?: unknown;
            system?: unknown;
            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
            type?: 'function';
        }
        namespace ChosenFunctionCall {
            interface Function {
                name: string;
                arguments?: string | null;
            }
            interface Bash20241022 {
                command?: string | null;
                restart?: boolean;
            }
            interface Computer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface TextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
        }
        interface ChosenComputer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface ChosenTextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
        interface ChosenBash20241022 {
            command?: string | null;
            restart?: boolean;
        }
    }
    interface Doc {
        id: string;
        owner: Doc.Owner;
        snippet: DocsAPI.Snippet;
        distance?: number | null;
        metadata?: unknown | null;
        title?: string | null;
    }
    namespace Doc {
        interface Owner {
            id: string;
            role: 'user' | 'agent';
        }
    }
    interface NamedToolChoice {
        function?: NamedToolChoice.Function | null;
    }
    namespace NamedToolChoice {
        interface Function {
            name: string;
            arguments?: string | null;
        }
    }
    /**
     * Payload for creating a tool
     */
    interface Tool {
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
}
export interface SessionCreateParams {
    agent?: string | null;
    agents?: Array<string> | null;
    auto_run_tools?: boolean;
    context_overflow?: 'truncate' | 'adaptive' | null;
    forward_tool_calls?: boolean;
    metadata?: unknown | null;
    recall_options?: SessionCreateParams.VectorDocSearch | SessionCreateParams.TextOnlyDocSearch | SessionCreateParams.HybridDocSearch | null;
    render_templates?: boolean;
    situation?: string | null;
    system_template?: string | null;
    token_budget?: number | null;
    user?: string | null;
    users?: Array<string> | null;
}
export declare namespace SessionCreateParams {
    interface VectorDocSearch {
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'vector';
        num_search_messages?: number;
    }
    interface TextOnlyDocSearch {
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mode?: 'text';
        num_search_messages?: number;
    }
    interface HybridDocSearch {
        alpha?: number;
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'hybrid';
        num_search_messages?: number;
    }
}
export interface SessionUpdateParams {
    auto_run_tools?: boolean;
    context_overflow?: 'truncate' | 'adaptive' | null;
    forward_tool_calls?: boolean;
    metadata?: unknown | null;
    recall_options?: SessionUpdateParams.VectorDocSearchUpdate | SessionUpdateParams.TextOnlyDocSearchUpdate | SessionUpdateParams.HybridDocSearchUpdate | null;
    render_templates?: boolean;
    situation?: string | null;
    system_template?: string | null;
    token_budget?: number | null;
}
export declare namespace SessionUpdateParams {
    interface VectorDocSearchUpdate {
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'vector';
        num_search_messages?: number;
    }
    interface TextOnlyDocSearchUpdate {
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mode?: 'text';
        num_search_messages?: number;
    }
    interface HybridDocSearchUpdate {
        alpha?: number;
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'hybrid';
        num_search_messages?: number;
    }
}
export interface SessionListParams extends OffsetPaginationParams {
    direction?: 'asc' | 'desc';
    metadata_filter?: Record<string, unknown>;
    sort_by?: 'created_at' | 'updated_at';
}
export interface SessionChatParams {
    /**
     * Body param:
     */
    messages: Array<SessionChatParams.Message>;
    /**
     * Query param:
     */
    connection_pool?: unknown;
    /**
     * Body param:
     */
    agent?: string | null;
    /**
     * Body param:
     */
    frequency_penalty?: number | null;
    /**
     * Body param:
     */
    length_penalty?: number | null;
    /**
     * Body param:
     */
    logit_bias?: Record<string, number> | null;
    /**
     * Body param:
     */
    max_tokens?: number | null;
    /**
     * Body param:
     */
    min_p?: number | null;
    /**
     * Body param:
     */
    model?: string | null;
    /**
     * Body param:
     */
    presence_penalty?: number | null;
    /**
     * Body param:
     */
    recall?: boolean;
    /**
     * Body param:
     */
    repetition_penalty?: number | null;
    /**
     * Body param:
     */
    response_format?: SessionChatParams.SimpleCompletionResponseFormat | SessionChatParams.SchemaCompletionResponseFormat | null;
    /**
     * Body param:
     */
    save?: boolean;
    /**
     * Body param:
     */
    seed?: number | null;
    /**
     * Body param:
     */
    stop?: Array<string>;
    /**
     * Body param:
     */
    stream?: boolean;
    /**
     * Body param:
     */
    temperature?: number | null;
    /**
     * Body param:
     */
    tool_choice?: 'auto' | 'none' | SessionChatParams.NamedToolChoice | null;
    /**
     * Body param:
     */
    tools?: Array<SessionChatParams.Tool> | null;
    /**
     * Body param:
     */
    top_p?: number | null;
    /**
     * Header param:
     */
    'X-Custom-Api-Key'?: string;
}
export declare namespace SessionChatParams {
    interface Message {
        role: 'user' | 'assistant' | 'system' | 'tool';
        content?: string | Array<string> | Array<Message.Content | Message.ContentModel7 | Message.AgentsAPIAutogenChatContentModelInput> | null;
        continue?: boolean | null;
        name?: string | null;
        tool_call_id?: string | null;
        tool_calls?: Array<Message.ChosenFunctionCall | Message.ChosenComputer20241022 | Message.ChosenTextEditor20241022 | Message.ChosenBash20241022> | null;
    }
    namespace Message {
        interface Content {
            text: string;
            type?: 'text';
        }
        interface ContentModel7 {
            /**
             * The image URL
             */
            image_url: ContentModel7.ImageURL;
            type?: 'image_url';
        }
        namespace ContentModel7 {
            /**
             * The image URL
             */
            interface ImageURL {
                url: string;
                detail?: 'low' | 'high' | 'auto';
            }
        }
        /**
         * Anthropic image content part
         */
        interface AgentsAPIAutogenChatContentModelInput {
            content: Array<AgentsAPIAutogenChatContentModelInput.UnionMember0> | Array<AgentsAPIAutogenChatContentModelInput.UnionMember1>;
            tool_use_id: string;
            type?: 'tool_result';
        }
        namespace AgentsAPIAutogenChatContentModelInput {
            interface UnionMember0 {
                text: string;
                type?: 'text';
            }
            interface UnionMember1 {
                source: UnionMember1.Source;
                type?: 'image';
            }
            namespace UnionMember1 {
                interface Source {
                    data: string;
                    media_type: string;
                    type?: 'base64';
                }
            }
        }
        interface ChosenFunctionCall {
            function: ChosenFunctionCall.Function;
            api_call?: unknown;
            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
            integration?: unknown;
            system?: unknown;
            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
            type?: 'function';
        }
        namespace ChosenFunctionCall {
            interface Function {
                name: string;
                arguments?: string | null;
            }
            interface Bash20241022 {
                command?: string | null;
                restart?: boolean;
            }
            interface Computer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface TextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
        }
        interface ChosenComputer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface ChosenTextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
        interface ChosenBash20241022 {
            command?: string | null;
            restart?: boolean;
        }
    }
    interface SimpleCompletionResponseFormat {
        type?: 'text' | 'json_object';
    }
    interface SchemaCompletionResponseFormat {
        json_schema: unknown;
        type?: 'json_schema';
    }
    interface NamedToolChoice {
        function?: NamedToolChoice.Function | null;
    }
    namespace NamedToolChoice {
        interface Function {
            name: string;
            arguments?: string | null;
        }
    }
    /**
     * Payload for creating a tool
     */
    interface Tool {
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
}
export interface SessionCreateOrUpdateParams {
    agent?: string | null;
    agents?: Array<string> | null;
    auto_run_tools?: boolean;
    context_overflow?: 'truncate' | 'adaptive' | null;
    forward_tool_calls?: boolean;
    metadata?: unknown | null;
    recall_options?: SessionCreateOrUpdateParams.VectorDocSearch | SessionCreateOrUpdateParams.TextOnlyDocSearch | SessionCreateOrUpdateParams.HybridDocSearch | null;
    render_templates?: boolean;
    situation?: string | null;
    system_template?: string | null;
    token_budget?: number | null;
    user?: string | null;
    users?: Array<string> | null;
}
export declare namespace SessionCreateOrUpdateParams {
    interface VectorDocSearch {
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'vector';
        num_search_messages?: number;
    }
    interface TextOnlyDocSearch {
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mode?: 'text';
        num_search_messages?: number;
    }
    interface HybridDocSearch {
        alpha?: number;
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'hybrid';
        num_search_messages?: number;
    }
}
export interface SessionRenderParams {
    messages: Array<SessionRenderParams.Message>;
    agent?: string | null;
    frequency_penalty?: number | null;
    length_penalty?: number | null;
    logit_bias?: Record<string, number> | null;
    max_tokens?: number | null;
    min_p?: number | null;
    model?: string | null;
    presence_penalty?: number | null;
    recall?: boolean;
    repetition_penalty?: number | null;
    response_format?: SessionRenderParams.SimpleCompletionResponseFormat | SessionRenderParams.SchemaCompletionResponseFormat | null;
    save?: boolean;
    seed?: number | null;
    stop?: Array<string>;
    stream?: boolean;
    temperature?: number | null;
    tool_choice?: 'auto' | 'none' | SessionRenderParams.NamedToolChoice | null;
    tools?: Array<SessionRenderParams.Tool> | null;
    top_p?: number | null;
}
export declare namespace SessionRenderParams {
    interface Message {
        role: 'user' | 'assistant' | 'system' | 'tool';
        content?: string | Array<string> | Array<Message.Content | Message.ContentModel7 | Message.AgentsAPIAutogenChatContentModelInput> | null;
        continue?: boolean | null;
        name?: string | null;
        tool_call_id?: string | null;
        tool_calls?: Array<Message.ChosenFunctionCall | Message.ChosenComputer20241022 | Message.ChosenTextEditor20241022 | Message.ChosenBash20241022> | null;
    }
    namespace Message {
        interface Content {
            text: string;
            type?: 'text';
        }
        interface ContentModel7 {
            /**
             * The image URL
             */
            image_url: ContentModel7.ImageURL;
            type?: 'image_url';
        }
        namespace ContentModel7 {
            /**
             * The image URL
             */
            interface ImageURL {
                url: string;
                detail?: 'low' | 'high' | 'auto';
            }
        }
        /**
         * Anthropic image content part
         */
        interface AgentsAPIAutogenChatContentModelInput {
            content: Array<AgentsAPIAutogenChatContentModelInput.UnionMember0> | Array<AgentsAPIAutogenChatContentModelInput.UnionMember1>;
            tool_use_id: string;
            type?: 'tool_result';
        }
        namespace AgentsAPIAutogenChatContentModelInput {
            interface UnionMember0 {
                text: string;
                type?: 'text';
            }
            interface UnionMember1 {
                source: UnionMember1.Source;
                type?: 'image';
            }
            namespace UnionMember1 {
                interface Source {
                    data: string;
                    media_type: string;
                    type?: 'base64';
                }
            }
        }
        interface ChosenFunctionCall {
            function: ChosenFunctionCall.Function;
            api_call?: unknown;
            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
            integration?: unknown;
            system?: unknown;
            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
            type?: 'function';
        }
        namespace ChosenFunctionCall {
            interface Function {
                name: string;
                arguments?: string | null;
            }
            interface Bash20241022 {
                command?: string | null;
                restart?: boolean;
            }
            interface Computer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface TextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
        }
        interface ChosenComputer20241022 {
            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
            coordinate?: Array<number> | null;
            text?: string | null;
        }
        interface ChosenTextEditor20241022 {
            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
            path: string;
            file_text?: string | null;
            insert_line?: number | null;
            new_str?: string | null;
            old_str?: string | null;
            view_range?: Array<number> | null;
        }
        interface ChosenBash20241022 {
            command?: string | null;
            restart?: boolean;
        }
    }
    interface SimpleCompletionResponseFormat {
        type?: 'text' | 'json_object';
    }
    interface SchemaCompletionResponseFormat {
        json_schema: unknown;
        type?: 'json_schema';
    }
    interface NamedToolChoice {
        function?: NamedToolChoice.Function | null;
    }
    namespace NamedToolChoice {
        interface Function {
            name: string;
            arguments?: string | null;
        }
    }
    /**
     * Payload for creating a tool
     */
    interface Tool {
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
}
export interface SessionResetParams {
    auto_run_tools?: boolean;
    context_overflow?: 'truncate' | 'adaptive' | null;
    forward_tool_calls?: boolean;
    metadata?: unknown | null;
    recall_options?: SessionResetParams.VectorDocSearch | SessionResetParams.TextOnlyDocSearch | SessionResetParams.HybridDocSearch | null;
    render_templates?: boolean;
    situation?: string | null;
    system_template?: string | null;
    token_budget?: number | null;
}
export declare namespace SessionResetParams {
    interface VectorDocSearch {
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'vector';
        num_search_messages?: number;
    }
    interface TextOnlyDocSearch {
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mode?: 'text';
        num_search_messages?: number;
    }
    interface HybridDocSearch {
        alpha?: number;
        confidence?: number;
        lang?: string;
        limit?: number;
        max_query_length?: number;
        metadata_filter?: unknown;
        mmr_strength?: number;
        mode?: 'hybrid';
        num_search_messages?: number;
    }
}
export declare namespace Sessions {
    export { type ChatInput as ChatInput, type ChatResponse as ChatResponse, type Entry as Entry, type History as History, type Session as Session, type SessionChatResponse as SessionChatResponse, type SessionRenderResponse as SessionRenderResponse, SessionsOffsetPagination as SessionsOffsetPagination, type SessionCreateParams as SessionCreateParams, type SessionUpdateParams as SessionUpdateParams, type SessionListParams as SessionListParams, type SessionChatParams as SessionChatParams, type SessionCreateOrUpdateParams as SessionCreateOrUpdateParams, type SessionRenderParams as SessionRenderParams, type SessionResetParams as SessionResetParams, };
}
//# sourceMappingURL=sessions.d.ts.map