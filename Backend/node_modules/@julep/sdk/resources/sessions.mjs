// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../resource.mjs";
import { isRequestOptions } from "../core.mjs";
import { OffsetPagination } from "../pagination.mjs";
export class Sessions extends APIResource {
    /**
     * Create Session
     */
    create(body, options) {
        return this._client.post('/sessions', { body, ...options });
    }
    /**
     * Patch Session
     */
    update(sessionId, body, options) {
        return this._client.patch(`/sessions/${sessionId}`, { body, ...options });
    }
    list(query = {}, options) {
        if (isRequestOptions(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/sessions', SessionsOffsetPagination, { query, ...options });
    }
    /**
     * Delete Session
     */
    delete(sessionId, options) {
        return this._client.delete(`/sessions/${sessionId}`, options);
    }
    /**
     * Initiates a chat session.
     *
     * Parameters: developer (Developer): The developer associated with the chat
     * session. session_id (UUID): The unique identifier of the chat session.
     * chat_input (ChatInput): The chat input data. background_tasks (BackgroundTasks):
     * The background tasks to run. x_custom_api_key (Optional[str]): The custom API
     * key.
     *
     * Returns: ChatResponse: The chat response.
     */
    chat(sessionId, params, options) {
        const { connection_pool, 'X-Custom-Api-Key': xCustomAPIKey, ...body } = params;
        return this._client.post(`/sessions/${sessionId}/chat`, {
            query: { connection_pool },
            body,
            ...options,
            headers: {
                ...(xCustomAPIKey != null ? { 'X-Custom-Api-Key': xCustomAPIKey } : undefined),
                ...options?.headers,
            },
        });
    }
    /**
     * Create Or Update Session
     */
    createOrUpdate(sessionId, body, options) {
        return this._client.post(`/sessions/${sessionId}`, { body, ...options });
    }
    /**
     * Get Session
     */
    get(sessionId, options) {
        return this._client.get(`/sessions/${sessionId}`, options);
    }
    /**
     * Get Session History
     */
    history(sessionId, options) {
        return this._client.get(`/sessions/${sessionId}/history`, options);
    }
    /**
     * Renders a chat input.
     *
     * Parameters: developer (Developer): The developer associated with the chat
     * session. session_id (UUID): The unique identifier of the chat session.
     * chat_input (ChatInput): The chat input data.
     *
     * Returns: RenderResponse: The rendered chat input.
     */
    render(sessionId, body, options) {
        return this._client.post(`/sessions/${sessionId}/render`, { body, ...options });
    }
    /**
     * Update Session
     */
    reset(sessionId, body, options) {
        return this._client.put(`/sessions/${sessionId}`, { body, ...options });
    }
}
export class SessionsOffsetPagination extends OffsetPagination {
}
Sessions.SessionsOffsetPagination = SessionsOffsetPagination;
//# sourceMappingURL=sessions.mjs.map