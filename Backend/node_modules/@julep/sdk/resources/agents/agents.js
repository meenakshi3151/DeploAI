"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AgentsOffsetPagination = exports.Agents = void 0;
const resource_1 = require("../../resource.js");
const core_1 = require("../../core.js");
const DocsAPI = __importStar(require("./docs.js"));
const docs_1 = require("./docs.js");
const ToolsAPI = __importStar(require("./tools.js"));
const tools_1 = require("./tools.js");
const pagination_1 = require("../../pagination.js");
class Agents extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.tools = new ToolsAPI.Tools(this._client);
        this.docs = new DocsAPI.Docs(this._client);
    }
    /**
     * Create Agent
     */
    create(body, options) {
        return this._client.post('/agents', { body, ...options });
    }
    /**
     * Patch Agent
     */
    update(agentId, body, options) {
        return this._client.patch(`/agents/${agentId}`, { body, ...options });
    }
    list(query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.list({}, query);
        }
        return this._client.getAPIList('/agents', AgentsOffsetPagination, { query, ...options });
    }
    /**
     * Delete Agent
     */
    delete(agentId, options) {
        return this._client.delete(`/agents/${agentId}`, options);
    }
    /**
     * Create Or Update Agent
     */
    createOrUpdate(agentId, body, options) {
        return this._client.post(`/agents/${agentId}`, { body, ...options });
    }
    /**
     * Get Agent Details
     */
    get(agentId, options) {
        return this._client.get(`/agents/${agentId}`, options);
    }
    /**
     * Update Agent
     */
    reset(agentId, body, options) {
        return this._client.put(`/agents/${agentId}`, { body, ...options });
    }
}
exports.Agents = Agents;
class AgentsOffsetPagination extends pagination_1.OffsetPagination {
}
exports.AgentsOffsetPagination = AgentsOffsetPagination;
Agents.AgentsOffsetPagination = AgentsOffsetPagination;
Agents.Tools = tools_1.Tools;
Agents.ToolListResponsesOffsetPagination = tools_1.ToolListResponsesOffsetPagination;
Agents.Docs = docs_1.Docs;
//# sourceMappingURL=agents.js.map