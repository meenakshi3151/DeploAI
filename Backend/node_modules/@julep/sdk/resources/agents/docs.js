"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocsOffsetPagination = exports.Docs = void 0;
const resource_1 = require("../../resource.js");
const core_1 = require("../../core.js");
const docs_1 = require("../docs.js");
Object.defineProperty(exports, "DocsOffsetPagination", { enumerable: true, get: function () { return docs_1.DocsOffsetPagination; } });
class Docs extends resource_1.APIResource {
    /**
     * Create Agent Doc
     */
    create(agentId, params, options) {
        const { connection_pool, ...body } = params;
        return this._client.post(`/agents/${agentId}/docs`, { query: { connection_pool }, body, ...options });
    }
    list(agentId, query = {}, options) {
        if ((0, core_1.isRequestOptions)(query)) {
            return this.list(agentId, {}, query);
        }
        return this._client.getAPIList(`/agents/${agentId}/docs`, docs_1.DocsOffsetPagination, { query, ...options });
    }
    /**
     * Delete Agent Doc
     */
    delete(agentId, docId, options) {
        return this._client.delete(`/agents/${agentId}/docs/${docId}`, options);
    }
    /**
     * Searches for documents associated with a specific agent.
     *
     * Parameters: x_developer_id (UUID): The unique identifier of the developer
     * associated with the agent. search_params (TextOnlyDocSearchRequest |
     * VectorDocSearchRequest | HybridDocSearchRequest): The parameters for the search.
     * agent_id (UUID): The unique identifier of the agent associated with the
     * documents.
     *
     * Returns: DocSearchResponse: The search results.
     */
    search(agentId, params, options) {
        const { connection_pool, ...body } = params;
        return this._client.post(`/agents/${agentId}/search`, { query: { connection_pool }, body, ...options });
    }
}
exports.Docs = Docs;
//# sourceMappingURL=docs.js.map