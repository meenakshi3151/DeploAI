import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import { OffsetPagination, type OffsetPaginationParams } from "../pagination.js";
export declare class Tasks extends APIResource {
    /**
     * Create Task
     */
    create(agentId: string, body: TaskCreateParams, options?: Core.RequestOptions): Core.APIPromise<Task>;
    /**
     * List Tasks
     */
    list(agentId: string, query?: TaskListParams, options?: Core.RequestOptions): Core.PagePromise<TasksOffsetPagination, Task>;
    list(agentId: string, options?: Core.RequestOptions): Core.PagePromise<TasksOffsetPagination, Task>;
    /**
     * Create Or Update Task
     */
    createOrUpdate(agentId: string, taskId: string, body: TaskCreateOrUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Task>;
    /**
     * Get Task Details
     */
    get(taskId: string, options?: Core.RequestOptions): Core.APIPromise<Task>;
}
export declare class TasksOffsetPagination extends OffsetPagination<Task> {
}
export interface Task {
    id: string;
    created_at: string;
    main: Array<Task.EvaluateStep | Task.ToolCallStep | Task.PromptStepOutput | Task.GetStep | Task.SetStep | Task.LogStep | Task.YieldStep | Task.ReturnStep | Task.SleepStep | Task.ErrorWorkflowStep | Task.WaitForInputStep | Task.IfElseWorkflowStepOutput | Task.SwitchStepOutput | Task.ForeachStepOutput | Task.ParallelStepOutput | Task.MainOutput>;
    name: string;
    updated_at: string;
    canonical_name?: string | null;
    description?: string;
    inherit_tools?: boolean;
    input_schema?: unknown | null;
    metadata?: unknown | null;
    tools?: Array<Task.Tool>;
    [k: string]: unknown;
}
export declare namespace Task {
    interface EvaluateStep {
        evaluate: Record<string, unknown | string>;
        kind_?: 'evaluate';
        label?: string | null;
    }
    interface ToolCallStep {
        tool: string;
        arguments?: unknown | '_';
        kind_?: 'tool_call';
        label?: string | null;
    }
    interface PromptStepOutput {
        prompt: Array<PromptStepOutput.UnionMember0> | string;
        auto_run_tools?: boolean;
        disable_cache?: boolean;
        kind_?: 'prompt';
        label?: string | null;
        settings?: unknown | null;
        tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
        tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
        unwrap?: boolean;
    }
    namespace PromptStepOutput {
        interface UnionMember0 {
            content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
            role: 'user' | 'assistant' | 'system' | 'tool';
            continue?: boolean | null;
            name?: string | null;
            tool_call_id?: string | null;
            tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
        }
        namespace UnionMember0 {
            interface Content {
                text: string;
                type?: 'text';
            }
            interface AgentsAPIAutogenTasksContentModel {
                /**
                 * The image URL
                 */
                image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                type?: 'image_url';
            }
            namespace AgentsAPIAutogenTasksContentModel {
                /**
                 * The image URL
                 */
                interface ImageURL {
                    url: string;
                    detail?: 'low' | 'high' | 'auto';
                }
            }
            /**
             * Anthropic image content part
             */
            interface AgentsAPIAutogenTasksContentModel1Output {
                content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                tool_use_id: string;
                type?: 'tool_result';
            }
            namespace AgentsAPIAutogenTasksContentModel1Output {
                interface UnionMember0 {
                    text: string;
                    type?: 'text';
                }
                interface UnionMember1 {
                    source: UnionMember1.Source;
                    type?: 'image';
                }
                namespace UnionMember1 {
                    interface Source {
                        data: string;
                        media_type: string;
                        type?: 'base64';
                    }
                }
            }
            interface ChosenFunctionCall {
                function: ChosenFunctionCall.Function;
                id?: string | null;
                api_call?: unknown;
                bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                integration?: unknown;
                system?: unknown;
                text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                type?: 'function';
            }
            namespace ChosenFunctionCall {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
                interface Bash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
                interface Computer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface TextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
            }
            interface ChosenComputer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface ChosenTextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
            interface ChosenBash20241022 {
                command?: string | null;
                restart?: boolean;
            }
        }
        interface NamedToolChoice {
            function?: NamedToolChoice.Function | null;
        }
        namespace NamedToolChoice {
            interface Function {
                name: string;
                arguments?: string | null;
            }
        }
        /**
         * Reference to a tool
         */
        interface ToolRef {
            /**
             * Reference to a tool by id
             */
            ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
        }
        namespace ToolRef {
            /**
             * Reference to a tool by id
             */
            interface ToolRefByID {
                id?: string | null;
            }
            /**
             * Reference to a tool by name
             */
            interface ToolRefByName {
                name?: string | null;
            }
        }
        /**
         * Payload for creating a tool
         */
        interface CreateToolRequestOutput {
            name: string;
            type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
            /**
             * API call definition
             */
            api_call?: CreateToolRequestOutput.APICall | null;
            bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
            /**
             * Anthropic new tools
             */
            computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
            description?: string | null;
            /**
             * Function definition
             */
            function?: CreateToolRequestOutput.Function | null;
            /**
             * Brave integration definition
             */
            integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
            /**
             * System definition
             */
            system?: CreateToolRequestOutput.System | null;
            text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
        }
        namespace CreateToolRequestOutput {
            /**
             * API call definition
             */
            interface APICall {
                method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                url: string;
                content?: string | null;
                cookies?: Record<string, string> | null;
                data?: unknown | null;
                files?: unknown | null;
                follow_redirects?: boolean | null;
                headers?: Record<string, string> | null;
                json?: unknown | null;
                params?: string | unknown | null;
                schema?: unknown | null;
                timeout?: number | null;
            }
            interface Bash20241022 {
                name?: string;
                type?: 'bash_20241022';
            }
            /**
             * Anthropic new tools
             */
            interface Computer20241022 {
                display_height_px?: number;
                display_number?: number;
                display_width_px?: number;
                name?: string;
                type?: 'computer_20241022';
            }
            /**
             * Function definition
             */
            interface Function {
                description?: unknown;
                name?: unknown;
                parameters?: unknown | null;
            }
            interface DummyIntegrationDef {
                arguments?: unknown;
                method?: string | null;
                provider?: 'dummy';
                setup?: unknown;
            }
            /**
             * Brave integration definition
             */
            interface BraveIntegrationDef {
                /**
                 * Arguments for Brave Search
                 */
                arguments?: BraveIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'brave';
                /**
                 * Integration definition for Brave Search
                 */
                setup?: BraveIntegrationDef.Setup | null;
            }
            namespace BraveIntegrationDef {
                /**
                 * Arguments for Brave Search
                 */
                interface Arguments {
                    query: string;
                }
                /**
                 * Integration definition for Brave Search
                 */
                interface Setup {
                    brave_api_key: string;
                }
            }
            /**
             * Email integration definition
             */
            interface EmailIntegrationDef {
                /**
                 * Arguments for Email sending
                 */
                arguments?: EmailIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'email';
                /**
                 * Setup parameters for Email integration
                 */
                setup?: EmailIntegrationDef.Setup | null;
            }
            namespace EmailIntegrationDef {
                /**
                 * Arguments for Email sending
                 */
                interface Arguments {
                    body: string;
                    from: string;
                    subject: string;
                    to: string;
                }
                /**
                 * Setup parameters for Email integration
                 */
                interface Setup {
                    host: string;
                    password: string;
                    port: number;
                    user: string;
                }
            }
            /**
             * Spider integration definition
             */
            interface SpiderIntegrationDef {
                /**
                 * Arguments for Spider integration
                 */
                arguments?: SpiderIntegrationDef.Arguments | null;
                method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                provider?: 'spider';
                /**
                 * Setup parameters for Spider integration
                 */
                setup?: SpiderIntegrationDef.Setup | null;
            }
            namespace SpiderIntegrationDef {
                /**
                 * Arguments for Spider integration
                 */
                interface Arguments {
                    url: string;
                    content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                    params?: unknown | null;
                }
                /**
                 * Setup parameters for Spider integration
                 */
                interface Setup {
                    spider_api_key: string;
                }
            }
            /**
             * Wikipedia integration definition
             */
            interface WikipediaIntegrationDef {
                /**
                 * Arguments for Wikipedia Search
                 */
                arguments?: WikipediaIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'wikipedia';
                setup?: unknown;
            }
            namespace WikipediaIntegrationDef {
                /**
                 * Arguments for Wikipedia Search
                 */
                interface Arguments {
                    query: string;
                    load_max_docs?: number;
                }
            }
            /**
             * Weather integration definition
             */
            interface WeatherIntegrationDef {
                /**
                 * Arguments for Weather
                 */
                arguments?: WeatherIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'weather';
                /**
                 * Integration definition for Weather
                 */
                setup?: WeatherIntegrationDef.Setup | null;
            }
            namespace WeatherIntegrationDef {
                /**
                 * Arguments for Weather
                 */
                interface Arguments {
                    location: string;
                }
                /**
                 * Integration definition for Weather
                 */
                interface Setup {
                    openweathermap_api_key: string;
                }
            }
            /**
             * browserbase context provider
             */
            interface BrowserbaseContextIntegrationDef {
                arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                method?: 'create_context';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseContextIntegrationDef.Setup | null;
            }
            namespace BrowserbaseContextIntegrationDef {
                interface Arguments {
                    projectId: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase extension provider
             */
            interface BrowserbaseExtensionIntegrationDef {
                arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                method?: 'install_extension_from_github' | null;
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseExtensionIntegrationDef {
                interface Arguments {
                    repositoryName: string;
                    ref?: string | null;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase list sessions integration definition
             */
            interface BrowserbaseListSessionsIntegrationDef {
                arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                method?: 'list_sessions';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
            }
            namespace BrowserbaseListSessionsIntegrationDef {
                interface Arguments {
                    status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase create session integration definition
             */
            interface BrowserbaseCreateSessionIntegrationDef {
                arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                method?: 'create_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseCreateSessionIntegrationDef {
                interface Arguments {
                    browserSettings?: unknown;
                    extensionId?: string | null;
                    keepAlive?: boolean;
                    projectId?: string | null;
                    proxies?: boolean | Array<unknown>;
                    timeout?: number;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase get session integration definition
             */
            interface BrowserbaseGetSessionIntegrationDef {
                arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                method?: 'get_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseGetSessionIntegrationDef {
                interface Arguments {
                    id: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase complete session integration definition
             */
            interface BrowserbaseCompleteSessionIntegrationDef {
                arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                method?: 'complete_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseCompleteSessionIntegrationDef {
                interface Arguments {
                    id: string;
                    status?: 'REQUEST_RELEASE';
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase get session live urls integration definition
             */
            interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                method?: 'get_live_urls';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
            }
            namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                interface Arguments {
                    id: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * The integration definition for the remote browser
             */
            interface RemoteBrowserIntegrationDef {
                /**
                 * The setup parameters for the remote browser
                 */
                setup: RemoteBrowserIntegrationDef.Setup;
                /**
                 * The arguments for the remote browser
                 */
                arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                method?: 'perform_action';
                provider?: 'remote_browser';
            }
            namespace RemoteBrowserIntegrationDef {
                /**
                 * The setup parameters for the remote browser
                 */
                interface Setup {
                    connect_url?: string | null;
                    height?: number | null;
                    width?: number | null;
                }
                /**
                 * The arguments for the remote browser
                 */
                interface Arguments {
                    action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                    connect_url?: string | null;
                    coordinate?: Array<unknown> | null;
                    text?: string | null;
                }
            }
            /**
             * LlamaParse integration definition
             */
            interface LlamaParseIntegrationDef {
                /**
                 * Arguments for LlamaParse integration
                 */
                arguments?: LlamaParseIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'llama_parse';
                /**
                 * Setup parameters for LlamaParse integration
                 */
                setup?: LlamaParseIntegrationDef.Setup | null;
            }
            namespace LlamaParseIntegrationDef {
                /**
                 * Arguments for LlamaParse integration
                 */
                interface Arguments {
                    file: string | Array<string>;
                    base64?: boolean;
                    filename?: string | null;
                    params?: unknown | null;
                }
                /**
                 * Setup parameters for LlamaParse integration
                 */
                interface Setup {
                    llamaparse_api_key: string;
                    params?: unknown | null;
                }
            }
            /**
             * Ffmpeg integration definition
             */
            interface FfmpegIntegrationDef {
                /**
                 * Arguments for Ffmpeg CMD
                 */
                arguments?: FfmpegIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'ffmpeg';
                setup?: unknown;
            }
            namespace FfmpegIntegrationDef {
                /**
                 * Arguments for Ffmpeg CMD
                 */
                interface Arguments {
                    cmd: string;
                    file?: string | Array<string> | null;
                }
            }
            /**
             * Cloudinary upload integration definition
             */
            interface CloudinaryUploadIntegrationDef {
                /**
                 * Arguments for Cloudinary media upload
                 */
                arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                method?: 'media_upload';
                provider?: 'cloudinary';
                /**
                 * Setup parameters for Cloudinary integration
                 */
                setup?: CloudinaryUploadIntegrationDef.Setup | null;
            }
            namespace CloudinaryUploadIntegrationDef {
                /**
                 * Arguments for Cloudinary media upload
                 */
                interface Arguments {
                    file: string;
                    public_id?: string | null;
                    return_base64?: boolean;
                    upload_params?: unknown | null;
                }
                /**
                 * Setup parameters for Cloudinary integration
                 */
                interface Setup {
                    cloudinary_api_key: string;
                    cloudinary_api_secret: string;
                    cloudinary_cloud_name: string;
                    params?: unknown | null;
                }
            }
            /**
             * Cloudinary edit integration definition
             */
            interface CloudinaryEditIntegrationDef {
                /**
                 * Arguments for Cloudinary media edit
                 */
                arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                method?: 'media_edit';
                provider?: 'cloudinary';
                /**
                 * Setup parameters for Cloudinary integration
                 */
                setup?: CloudinaryEditIntegrationDef.Setup | null;
            }
            namespace CloudinaryEditIntegrationDef {
                /**
                 * Arguments for Cloudinary media edit
                 */
                interface Arguments {
                    public_id: string;
                    transformation: Array<unknown>;
                    return_base64?: boolean;
                }
                /**
                 * Setup parameters for Cloudinary integration
                 */
                interface Setup {
                    cloudinary_api_key: string;
                    cloudinary_api_secret: string;
                    cloudinary_cloud_name: string;
                    params?: unknown | null;
                }
            }
            /**
             * Arxiv integration definition
             */
            interface ArxivIntegrationDef {
                /**
                 * Arguments for Arxiv Search
                 */
                arguments?: ArxivIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'arxiv';
                setup?: unknown;
            }
            namespace ArxivIntegrationDef {
                /**
                 * Arguments for Arxiv Search
                 */
                interface Arguments {
                    query: string;
                    download_pdf?: boolean;
                    id_list?: Array<string> | null;
                    max_results?: number;
                    sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                    sort_order?: 'ascending' | 'descending';
                }
            }
            /**
             * Unstructured integration definition
             */
            interface UnstructuredIntegrationDef {
                /**
                 * Arguments for Unstructured partition integration
                 */
                arguments?: UnstructuredIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'unstructured';
                /**
                 * Setup parameters for Unstructured integration
                 */
                setup?: UnstructuredIntegrationDef.Setup | null;
            }
            namespace UnstructuredIntegrationDef {
                /**
                 * Arguments for Unstructured partition integration
                 */
                interface Arguments {
                    file: string;
                    filename?: string | null;
                    partition_params?: unknown | null;
                }
                /**
                 * Setup parameters for Unstructured integration
                 */
                interface Setup {
                    unstructured_api_key: string;
                    retry_config?: unknown | null;
                    server?: string | null;
                    server_url?: string | null;
                    timeout_ms?: number | null;
                    url_params?: unknown | null;
                }
            }
            /**
             * Algolia integration definition
             */
            interface AlgoliaIntegrationDef {
                /**
                 * Arguments for Algolia Search
                 */
                arguments?: AlgoliaIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'algolia';
                /**
                 * Integration definition for Algolia
                 */
                setup?: AlgoliaIntegrationDef.Setup | null;
            }
            namespace AlgoliaIntegrationDef {
                /**
                 * Arguments for Algolia Search
                 */
                interface Arguments {
                    index_name: string;
                    query: string;
                    attributes_to_retrieve?: Array<string> | null;
                    hits_per_page?: number;
                }
                /**
                 * Integration definition for Algolia
                 */
                interface Setup {
                    algolia_api_key: string;
                    algolia_application_id: string;
                }
            }
            /**
             * System definition
             */
            interface System {
                operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                arguments?: unknown | null;
                resource_id?: string | null;
                subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
            }
            interface TextEditor20241022 {
                name?: string;
                type?: 'text_editor_20241022';
            }
        }
    }
    interface GetStep {
        get: string;
        kind_?: 'get';
        label?: string | null;
    }
    interface SetStep {
        set: Record<string, unknown | string>;
        kind_?: 'set';
        label?: string | null;
    }
    interface LogStep {
        log: string;
        kind_?: 'log';
        label?: string | null;
    }
    interface YieldStep {
        workflow: string;
        arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
        kind_?: 'yield';
        label?: string | null;
    }
    interface ReturnStep {
        return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
        kind_?: 'return';
        label?: string | null;
    }
    interface SleepStep {
        sleep: SleepStep.Sleep;
        kind_?: 'sleep';
        label?: string | null;
    }
    namespace SleepStep {
        interface Sleep {
            days?: number;
            hours?: number;
            minutes?: number;
            seconds?: number;
        }
    }
    interface ErrorWorkflowStep {
        error: string;
        kind_?: 'error';
        label?: string | null;
    }
    interface WaitForInputStep {
        wait_for_input: WaitForInputStep.WaitForInput;
        kind_?: 'wait_for_input';
        label?: string | null;
    }
    namespace WaitForInputStep {
        interface WaitForInput {
            info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
        }
    }
    interface IfElseWorkflowStepOutput {
        if: string;
        /**
         * The steps to run if the condition is true
         */
        then: IfElseWorkflowStepOutput.WaitForInputStep | IfElseWorkflowStepOutput.EvaluateStep | IfElseWorkflowStepOutput.ToolCallStep | IfElseWorkflowStepOutput.PromptStepOutput | IfElseWorkflowStepOutput.GetStep | IfElseWorkflowStepOutput.SetStep | IfElseWorkflowStepOutput.LogStep | IfElseWorkflowStepOutput.YieldStep | IfElseWorkflowStepOutput.ReturnStep | IfElseWorkflowStepOutput.SleepStep | IfElseWorkflowStepOutput.ErrorWorkflowStep | unknown | IfElseWorkflowStepOutput.SwitchStepOutput | IfElseWorkflowStepOutput.ForeachStepOutput | IfElseWorkflowStepOutput.ParallelStepOutput | IfElseWorkflowStepOutput.ThenOutput;
        /**
         * The steps to run if the condition is false
         */
        else?: IfElseWorkflowStepOutput.WaitForInputStep | IfElseWorkflowStepOutput.EvaluateStep | IfElseWorkflowStepOutput.ToolCallStep | IfElseWorkflowStepOutput.PromptStepOutput | IfElseWorkflowStepOutput.GetStep | IfElseWorkflowStepOutput.SetStep | IfElseWorkflowStepOutput.LogStep | IfElseWorkflowStepOutput.YieldStep | IfElseWorkflowStepOutput.ReturnStep | IfElseWorkflowStepOutput.SleepStep | IfElseWorkflowStepOutput.ErrorWorkflowStep | unknown | IfElseWorkflowStepOutput.SwitchStepOutput | IfElseWorkflowStepOutput.ForeachStepOutput | IfElseWorkflowStepOutput.ParallelStepOutput | IfElseWorkflowStepOutput.ElseOutput | null;
        kind_?: 'if_else';
        label?: string | null;
    }
    namespace IfElseWorkflowStepOutput {
        interface WaitForInputStep {
            wait_for_input: WaitForInputStep.WaitForInput;
            kind_?: 'wait_for_input';
            label?: string | null;
        }
        namespace WaitForInputStep {
            interface WaitForInput {
                info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            }
        }
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            kind_?: 'evaluate';
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            kind_?: 'tool_call';
            label?: string | null;
        }
        interface PromptStepOutput {
            prompt: Array<PromptStepOutput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            kind_?: 'prompt';
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
            unwrap?: boolean;
        }
        namespace PromptStepOutput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface AgentsAPIAutogenTasksContentModel1Output {
                    content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace AgentsAPIAutogenTasksContentModel1Output {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    id?: string | null;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface CreateToolRequestOutput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: CreateToolRequestOutput.APICall | null;
                bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: CreateToolRequestOutput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: CreateToolRequestOutput.System | null;
                text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
            }
            namespace CreateToolRequestOutput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            kind_?: 'get';
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            kind_?: 'set';
            label?: string | null;
        }
        interface LogStep {
            log: string;
            kind_?: 'log';
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            kind_?: 'yield';
            label?: string | null;
        }
        interface ReturnStep {
            return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            kind_?: 'return';
            label?: string | null;
        }
        interface SleepStep {
            sleep: SleepStep.Sleep;
            kind_?: 'sleep';
            label?: string | null;
        }
        namespace SleepStep {
            interface Sleep {
                days?: number;
                hours?: number;
                minutes?: number;
                seconds?: number;
            }
        }
        interface ErrorWorkflowStep {
            error: string;
            kind_?: 'error';
            label?: string | null;
        }
        interface SwitchStepOutput {
            switch: Array<SwitchStepOutput.Switch>;
            kind_?: 'switch';
            label?: string | null;
        }
        namespace SwitchStepOutput {
            interface Switch {
                case: '_';
                then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepOutput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
            }
            namespace Switch {
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    kind_?: 'evaluate';
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    kind_?: 'tool_call';
                    label?: string | null;
                }
                interface PromptStepOutput {
                    prompt: Array<PromptStepOutput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    kind_?: 'prompt';
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                    unwrap?: boolean;
                }
                namespace PromptStepOutput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface AgentsAPIAutogenTasksContentModel1Output {
                            content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace AgentsAPIAutogenTasksContentModel1Output {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            id?: string | null;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface CreateToolRequestOutput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: CreateToolRequestOutput.APICall | null;
                        bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: CreateToolRequestOutput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: CreateToolRequestOutput.System | null;
                        text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                    }
                    namespace CreateToolRequestOutput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    kind_?: 'get';
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    kind_?: 'set';
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    kind_?: 'log';
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    kind_?: 'yield';
                    label?: string | null;
                }
                interface ReturnStep {
                    return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    kind_?: 'return';
                    label?: string | null;
                }
                interface SleepStep {
                    sleep: SleepStep.Sleep;
                    kind_?: 'sleep';
                    label?: string | null;
                }
                namespace SleepStep {
                    interface Sleep {
                        days?: number;
                        hours?: number;
                        minutes?: number;
                        seconds?: number;
                    }
                }
                interface ErrorWorkflowStep {
                    error: string;
                    kind_?: 'error';
                    label?: string | null;
                }
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    kind_?: 'wait_for_input';
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
            }
        }
        interface ForeachStepOutput {
            foreach: ForeachStepOutput.Foreach;
            kind_?: 'foreach';
            label?: string | null;
        }
        namespace ForeachStepOutput {
            interface Foreach {
                do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepOutput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
                in: string;
            }
            namespace Foreach {
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    kind_?: 'wait_for_input';
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    kind_?: 'evaluate';
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    kind_?: 'tool_call';
                    label?: string | null;
                }
                interface PromptStepOutput {
                    prompt: Array<PromptStepOutput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    kind_?: 'prompt';
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                    unwrap?: boolean;
                }
                namespace PromptStepOutput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface AgentsAPIAutogenTasksContentModel1Output {
                            content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace AgentsAPIAutogenTasksContentModel1Output {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            id?: string | null;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface CreateToolRequestOutput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: CreateToolRequestOutput.APICall | null;
                        bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: CreateToolRequestOutput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: CreateToolRequestOutput.System | null;
                        text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                    }
                    namespace CreateToolRequestOutput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    kind_?: 'get';
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    kind_?: 'set';
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    kind_?: 'log';
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    kind_?: 'yield';
                    label?: string | null;
                }
            }
        }
        interface ParallelStepOutput {
            parallel: Array<ParallelStepOutput.EvaluateStep | ParallelStepOutput.ToolCallStep | ParallelStepOutput.PromptStepOutput | ParallelStepOutput.GetStep | ParallelStepOutput.SetStep | ParallelStepOutput.LogStep | ParallelStepOutput.YieldStep>;
            kind_?: 'parallel';
            label?: string | null;
        }
        namespace ParallelStepOutput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                kind_?: 'evaluate';
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                kind_?: 'tool_call';
                label?: string | null;
            }
            interface PromptStepOutput {
                prompt: Array<PromptStepOutput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                kind_?: 'prompt';
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                unwrap?: boolean;
            }
            namespace PromptStepOutput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface AgentsAPIAutogenTasksContentModel1Output {
                        content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace AgentsAPIAutogenTasksContentModel1Output {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        id?: string | null;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface CreateToolRequestOutput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: CreateToolRequestOutput.APICall | null;
                    bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: CreateToolRequestOutput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: CreateToolRequestOutput.System | null;
                    text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                }
                namespace CreateToolRequestOutput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                kind_?: 'get';
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                kind_?: 'set';
                label?: string | null;
            }
            interface LogStep {
                log: string;
                kind_?: 'log';
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                kind_?: 'yield';
                label?: string | null;
            }
        }
        /**
         * The steps to run if the condition is true
         */
        interface ThenOutput {
            map: ThenOutput.EvaluateStep | ThenOutput.ToolCallStep | ThenOutput.PromptStepOutput | ThenOutput.GetStep | ThenOutput.SetStep | ThenOutput.LogStep | ThenOutput.YieldStep;
            over: string;
            initial?: unknown;
            kind_?: 'map_reduce';
            label?: string | null;
            parallelism?: number | null;
            reduce?: string | null;
        }
        namespace ThenOutput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                kind_?: 'evaluate';
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                kind_?: 'tool_call';
                label?: string | null;
            }
            interface PromptStepOutput {
                prompt: Array<PromptStepOutput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                kind_?: 'prompt';
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                unwrap?: boolean;
            }
            namespace PromptStepOutput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface AgentsAPIAutogenTasksContentModel1Output {
                        content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace AgentsAPIAutogenTasksContentModel1Output {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        id?: string | null;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface CreateToolRequestOutput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: CreateToolRequestOutput.APICall | null;
                    bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: CreateToolRequestOutput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: CreateToolRequestOutput.System | null;
                    text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                }
                namespace CreateToolRequestOutput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                kind_?: 'get';
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                kind_?: 'set';
                label?: string | null;
            }
            interface LogStep {
                log: string;
                kind_?: 'log';
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                kind_?: 'yield';
                label?: string | null;
            }
        }
        interface WaitForInputStep {
            wait_for_input: WaitForInputStep.WaitForInput;
            kind_?: 'wait_for_input';
            label?: string | null;
        }
        namespace WaitForInputStep {
            interface WaitForInput {
                info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            }
        }
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            kind_?: 'evaluate';
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            kind_?: 'tool_call';
            label?: string | null;
        }
        interface PromptStepOutput {
            prompt: Array<PromptStepOutput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            kind_?: 'prompt';
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
            unwrap?: boolean;
        }
        namespace PromptStepOutput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface AgentsAPIAutogenTasksContentModel1Output {
                    content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace AgentsAPIAutogenTasksContentModel1Output {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    id?: string | null;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface CreateToolRequestOutput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: CreateToolRequestOutput.APICall | null;
                bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: CreateToolRequestOutput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: CreateToolRequestOutput.System | null;
                text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
            }
            namespace CreateToolRequestOutput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            kind_?: 'get';
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            kind_?: 'set';
            label?: string | null;
        }
        interface LogStep {
            log: string;
            kind_?: 'log';
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            kind_?: 'yield';
            label?: string | null;
        }
        interface ReturnStep {
            return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            kind_?: 'return';
            label?: string | null;
        }
        interface SleepStep {
            sleep: SleepStep.Sleep;
            kind_?: 'sleep';
            label?: string | null;
        }
        namespace SleepStep {
            interface Sleep {
                days?: number;
                hours?: number;
                minutes?: number;
                seconds?: number;
            }
        }
        interface ErrorWorkflowStep {
            error: string;
            kind_?: 'error';
            label?: string | null;
        }
        interface SwitchStepOutput {
            switch: Array<SwitchStepOutput.Switch>;
            kind_?: 'switch';
            label?: string | null;
        }
        namespace SwitchStepOutput {
            interface Switch {
                case: '_';
                then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepOutput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
            }
            namespace Switch {
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    kind_?: 'evaluate';
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    kind_?: 'tool_call';
                    label?: string | null;
                }
                interface PromptStepOutput {
                    prompt: Array<PromptStepOutput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    kind_?: 'prompt';
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                    unwrap?: boolean;
                }
                namespace PromptStepOutput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface AgentsAPIAutogenTasksContentModel1Output {
                            content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace AgentsAPIAutogenTasksContentModel1Output {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            id?: string | null;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface CreateToolRequestOutput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: CreateToolRequestOutput.APICall | null;
                        bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: CreateToolRequestOutput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: CreateToolRequestOutput.System | null;
                        text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                    }
                    namespace CreateToolRequestOutput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    kind_?: 'get';
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    kind_?: 'set';
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    kind_?: 'log';
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    kind_?: 'yield';
                    label?: string | null;
                }
                interface ReturnStep {
                    return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    kind_?: 'return';
                    label?: string | null;
                }
                interface SleepStep {
                    sleep: SleepStep.Sleep;
                    kind_?: 'sleep';
                    label?: string | null;
                }
                namespace SleepStep {
                    interface Sleep {
                        days?: number;
                        hours?: number;
                        minutes?: number;
                        seconds?: number;
                    }
                }
                interface ErrorWorkflowStep {
                    error: string;
                    kind_?: 'error';
                    label?: string | null;
                }
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    kind_?: 'wait_for_input';
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
            }
        }
        interface ForeachStepOutput {
            foreach: ForeachStepOutput.Foreach;
            kind_?: 'foreach';
            label?: string | null;
        }
        namespace ForeachStepOutput {
            interface Foreach {
                do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepOutput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
                in: string;
            }
            namespace Foreach {
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    kind_?: 'wait_for_input';
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    kind_?: 'evaluate';
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    kind_?: 'tool_call';
                    label?: string | null;
                }
                interface PromptStepOutput {
                    prompt: Array<PromptStepOutput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    kind_?: 'prompt';
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                    unwrap?: boolean;
                }
                namespace PromptStepOutput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface AgentsAPIAutogenTasksContentModel1Output {
                            content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace AgentsAPIAutogenTasksContentModel1Output {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            id?: string | null;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface CreateToolRequestOutput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: CreateToolRequestOutput.APICall | null;
                        bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: CreateToolRequestOutput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: CreateToolRequestOutput.System | null;
                        text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                    }
                    namespace CreateToolRequestOutput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    kind_?: 'get';
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    kind_?: 'set';
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    kind_?: 'log';
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    kind_?: 'yield';
                    label?: string | null;
                }
            }
        }
        interface ParallelStepOutput {
            parallel: Array<ParallelStepOutput.EvaluateStep | ParallelStepOutput.ToolCallStep | ParallelStepOutput.PromptStepOutput | ParallelStepOutput.GetStep | ParallelStepOutput.SetStep | ParallelStepOutput.LogStep | ParallelStepOutput.YieldStep>;
            kind_?: 'parallel';
            label?: string | null;
        }
        namespace ParallelStepOutput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                kind_?: 'evaluate';
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                kind_?: 'tool_call';
                label?: string | null;
            }
            interface PromptStepOutput {
                prompt: Array<PromptStepOutput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                kind_?: 'prompt';
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                unwrap?: boolean;
            }
            namespace PromptStepOutput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface AgentsAPIAutogenTasksContentModel1Output {
                        content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace AgentsAPIAutogenTasksContentModel1Output {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        id?: string | null;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface CreateToolRequestOutput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: CreateToolRequestOutput.APICall | null;
                    bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: CreateToolRequestOutput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: CreateToolRequestOutput.System | null;
                    text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                }
                namespace CreateToolRequestOutput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                kind_?: 'get';
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                kind_?: 'set';
                label?: string | null;
            }
            interface LogStep {
                log: string;
                kind_?: 'log';
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                kind_?: 'yield';
                label?: string | null;
            }
        }
        /**
         * The steps to run if the condition is false
         */
        interface ElseOutput {
            map: ElseOutput.EvaluateStep | ElseOutput.ToolCallStep | ElseOutput.PromptStepOutput | ElseOutput.GetStep | ElseOutput.SetStep | ElseOutput.LogStep | ElseOutput.YieldStep;
            over: string;
            initial?: unknown;
            kind_?: 'map_reduce';
            label?: string | null;
            parallelism?: number | null;
            reduce?: string | null;
        }
        namespace ElseOutput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                kind_?: 'evaluate';
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                kind_?: 'tool_call';
                label?: string | null;
            }
            interface PromptStepOutput {
                prompt: Array<PromptStepOutput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                kind_?: 'prompt';
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                unwrap?: boolean;
            }
            namespace PromptStepOutput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface AgentsAPIAutogenTasksContentModel1Output {
                        content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace AgentsAPIAutogenTasksContentModel1Output {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        id?: string | null;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface CreateToolRequestOutput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: CreateToolRequestOutput.APICall | null;
                    bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: CreateToolRequestOutput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: CreateToolRequestOutput.System | null;
                    text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                }
                namespace CreateToolRequestOutput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                kind_?: 'get';
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                kind_?: 'set';
                label?: string | null;
            }
            interface LogStep {
                log: string;
                kind_?: 'log';
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                kind_?: 'yield';
                label?: string | null;
            }
        }
    }
    interface SwitchStepOutput {
        switch: Array<SwitchStepOutput.Switch>;
        kind_?: 'switch';
        label?: string | null;
    }
    namespace SwitchStepOutput {
        interface Switch {
            case: '_';
            then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepOutput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
        }
        namespace Switch {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                kind_?: 'evaluate';
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                kind_?: 'tool_call';
                label?: string | null;
            }
            interface PromptStepOutput {
                prompt: Array<PromptStepOutput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                kind_?: 'prompt';
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                unwrap?: boolean;
            }
            namespace PromptStepOutput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface AgentsAPIAutogenTasksContentModel1Output {
                        content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace AgentsAPIAutogenTasksContentModel1Output {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        id?: string | null;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface CreateToolRequestOutput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: CreateToolRequestOutput.APICall | null;
                    bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: CreateToolRequestOutput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: CreateToolRequestOutput.System | null;
                    text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                }
                namespace CreateToolRequestOutput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                kind_?: 'get';
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                kind_?: 'set';
                label?: string | null;
            }
            interface LogStep {
                log: string;
                kind_?: 'log';
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                kind_?: 'yield';
                label?: string | null;
            }
            interface ReturnStep {
                return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                kind_?: 'return';
                label?: string | null;
            }
            interface SleepStep {
                sleep: SleepStep.Sleep;
                kind_?: 'sleep';
                label?: string | null;
            }
            namespace SleepStep {
                interface Sleep {
                    days?: number;
                    hours?: number;
                    minutes?: number;
                    seconds?: number;
                }
            }
            interface ErrorWorkflowStep {
                error: string;
                kind_?: 'error';
                label?: string | null;
            }
            interface WaitForInputStep {
                wait_for_input: WaitForInputStep.WaitForInput;
                kind_?: 'wait_for_input';
                label?: string | null;
            }
            namespace WaitForInputStep {
                interface WaitForInput {
                    info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                }
            }
        }
    }
    interface ForeachStepOutput {
        foreach: ForeachStepOutput.Foreach;
        kind_?: 'foreach';
        label?: string | null;
    }
    namespace ForeachStepOutput {
        interface Foreach {
            do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepOutput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
            in: string;
        }
        namespace Foreach {
            interface WaitForInputStep {
                wait_for_input: WaitForInputStep.WaitForInput;
                kind_?: 'wait_for_input';
                label?: string | null;
            }
            namespace WaitForInputStep {
                interface WaitForInput {
                    info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                }
            }
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                kind_?: 'evaluate';
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                kind_?: 'tool_call';
                label?: string | null;
            }
            interface PromptStepOutput {
                prompt: Array<PromptStepOutput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                kind_?: 'prompt';
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
                unwrap?: boolean;
            }
            namespace PromptStepOutput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface AgentsAPIAutogenTasksContentModel1Output {
                        content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace AgentsAPIAutogenTasksContentModel1Output {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        id?: string | null;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface CreateToolRequestOutput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: CreateToolRequestOutput.APICall | null;
                    bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: CreateToolRequestOutput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: CreateToolRequestOutput.System | null;
                    text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
                }
                namespace CreateToolRequestOutput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                kind_?: 'get';
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                kind_?: 'set';
                label?: string | null;
            }
            interface LogStep {
                log: string;
                kind_?: 'log';
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                kind_?: 'yield';
                label?: string | null;
            }
        }
    }
    interface ParallelStepOutput {
        parallel: Array<ParallelStepOutput.EvaluateStep | ParallelStepOutput.ToolCallStep | ParallelStepOutput.PromptStepOutput | ParallelStepOutput.GetStep | ParallelStepOutput.SetStep | ParallelStepOutput.LogStep | ParallelStepOutput.YieldStep>;
        kind_?: 'parallel';
        label?: string | null;
    }
    namespace ParallelStepOutput {
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            kind_?: 'evaluate';
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            kind_?: 'tool_call';
            label?: string | null;
        }
        interface PromptStepOutput {
            prompt: Array<PromptStepOutput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            kind_?: 'prompt';
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
            unwrap?: boolean;
        }
        namespace PromptStepOutput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface AgentsAPIAutogenTasksContentModel1Output {
                    content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace AgentsAPIAutogenTasksContentModel1Output {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    id?: string | null;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface CreateToolRequestOutput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: CreateToolRequestOutput.APICall | null;
                bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: CreateToolRequestOutput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: CreateToolRequestOutput.System | null;
                text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
            }
            namespace CreateToolRequestOutput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            kind_?: 'get';
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            kind_?: 'set';
            label?: string | null;
        }
        interface LogStep {
            log: string;
            kind_?: 'log';
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            kind_?: 'yield';
            label?: string | null;
        }
    }
    interface MainOutput {
        map: MainOutput.EvaluateStep | MainOutput.ToolCallStep | MainOutput.PromptStepOutput | MainOutput.GetStep | MainOutput.SetStep | MainOutput.LogStep | MainOutput.YieldStep;
        over: string;
        initial?: unknown;
        kind_?: 'map_reduce';
        label?: string | null;
        parallelism?: number | null;
        reduce?: string | null;
    }
    namespace MainOutput {
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            kind_?: 'evaluate';
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            kind_?: 'tool_call';
            label?: string | null;
        }
        interface PromptStepOutput {
            prompt: Array<PromptStepOutput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            kind_?: 'prompt';
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepOutput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepOutput.ToolRef | PromptStepOutput.CreateToolRequestOutput>;
            unwrap?: boolean;
        }
        namespace PromptStepOutput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.AgentsAPIAutogenTasksContentModel1Output> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface AgentsAPIAutogenTasksContentModel1Output {
                    content: Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember0> | Array<AgentsAPIAutogenTasksContentModel1Output.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace AgentsAPIAutogenTasksContentModel1Output {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    id?: string | null;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface CreateToolRequestOutput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: CreateToolRequestOutput.APICall | null;
                bash_20241022?: CreateToolRequestOutput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: CreateToolRequestOutput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: CreateToolRequestOutput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: CreateToolRequestOutput.DummyIntegrationDef | CreateToolRequestOutput.BraveIntegrationDef | CreateToolRequestOutput.EmailIntegrationDef | CreateToolRequestOutput.SpiderIntegrationDef | CreateToolRequestOutput.WikipediaIntegrationDef | CreateToolRequestOutput.WeatherIntegrationDef | CreateToolRequestOutput.BrowserbaseContextIntegrationDef | CreateToolRequestOutput.BrowserbaseExtensionIntegrationDef | CreateToolRequestOutput.BrowserbaseListSessionsIntegrationDef | CreateToolRequestOutput.BrowserbaseCreateSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseCompleteSessionIntegrationDef | CreateToolRequestOutput.BrowserbaseGetSessionLiveURLsIntegrationDef | CreateToolRequestOutput.RemoteBrowserIntegrationDef | CreateToolRequestOutput.LlamaParseIntegrationDef | CreateToolRequestOutput.FfmpegIntegrationDef | CreateToolRequestOutput.CloudinaryUploadIntegrationDef | CreateToolRequestOutput.CloudinaryEditIntegrationDef | CreateToolRequestOutput.ArxivIntegrationDef | CreateToolRequestOutput.UnstructuredIntegrationDef | CreateToolRequestOutput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: CreateToolRequestOutput.System | null;
                text_editor_20241022?: CreateToolRequestOutput.TextEditor20241022 | null;
            }
            namespace CreateToolRequestOutput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            kind_?: 'get';
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            kind_?: 'set';
            label?: string | null;
        }
        interface LogStep {
            log: string;
            kind_?: 'log';
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            kind_?: 'yield';
            label?: string | null;
        }
    }
    interface Tool {
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        inherited?: boolean;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
}
export interface TaskCreateParams {
    main: Array<TaskCreateParams.EvaluateStep | TaskCreateParams.ToolCallStep | TaskCreateParams.PromptStepInput | TaskCreateParams.GetStep | TaskCreateParams.SetStep | TaskCreateParams.LogStep | TaskCreateParams.YieldStep | TaskCreateParams.ReturnStep | TaskCreateParams.SleepStep | TaskCreateParams.ErrorWorkflowStep | TaskCreateParams.WaitForInputStep | TaskCreateParams.IfElseWorkflowStepInput | TaskCreateParams.SwitchStepInput | TaskCreateParams.ForeachStepInput | TaskCreateParams.ParallelStepInput | TaskCreateParams.MainInput>;
    name: string;
    canonical_name?: string | null;
    description?: string;
    inherit_tools?: boolean;
    input_schema?: unknown | null;
    metadata?: unknown | null;
    tools?: Array<TaskCreateParams.Tool>;
    [k: string]: unknown;
}
export declare namespace TaskCreateParams {
    interface EvaluateStep {
        evaluate: Record<string, unknown | string>;
        label?: string | null;
    }
    interface ToolCallStep {
        tool: string;
        arguments?: unknown | '_';
        label?: string | null;
    }
    interface PromptStepInput {
        prompt: Array<PromptStepInput.UnionMember0> | string;
        auto_run_tools?: boolean;
        disable_cache?: boolean;
        label?: string | null;
        settings?: unknown | null;
        tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
        tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
        unwrap?: boolean;
    }
    namespace PromptStepInput {
        interface UnionMember0 {
            content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
            role: 'user' | 'assistant' | 'system' | 'tool';
            continue?: boolean | null;
            name?: string | null;
            tool_call_id?: string | null;
            tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
        }
        namespace UnionMember0 {
            interface Content {
                text: string;
                type?: 'text';
            }
            interface AgentsAPIAutogenTasksContentModel {
                /**
                 * The image URL
                 */
                image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                type?: 'image_url';
            }
            namespace AgentsAPIAutogenTasksContentModel {
                /**
                 * The image URL
                 */
                interface ImageURL {
                    url: string;
                    detail?: 'low' | 'high' | 'auto';
                }
            }
            /**
             * Anthropic image content part
             */
            interface ContentModel1Input {
                content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                tool_use_id: string;
                type?: 'tool_result';
            }
            namespace ContentModel1Input {
                interface UnionMember0 {
                    text: string;
                    type?: 'text';
                }
                interface UnionMember1 {
                    source: UnionMember1.Source;
                    type?: 'image';
                }
                namespace UnionMember1 {
                    interface Source {
                        data: string;
                        media_type: string;
                        type?: 'base64';
                    }
                }
            }
            interface ChosenFunctionCall {
                function: ChosenFunctionCall.Function;
                api_call?: unknown;
                bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                integration?: unknown;
                system?: unknown;
                text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                type?: 'function';
            }
            namespace ChosenFunctionCall {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
                interface Bash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
                interface Computer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface TextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
            }
            interface ChosenComputer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface ChosenTextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
            interface ChosenBash20241022 {
                command?: string | null;
                restart?: boolean;
            }
        }
        interface NamedToolChoice {
            function?: NamedToolChoice.Function | null;
        }
        namespace NamedToolChoice {
            interface Function {
                name: string;
                arguments?: string | null;
            }
        }
        /**
         * Reference to a tool
         */
        interface ToolRef {
            /**
             * Reference to a tool by id
             */
            ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
        }
        namespace ToolRef {
            /**
             * Reference to a tool by id
             */
            interface ToolRefByID {
                id?: string | null;
            }
            /**
             * Reference to a tool by name
             */
            interface ToolRefByName {
                name?: string | null;
            }
        }
        /**
         * Payload for creating a tool
         */
        interface AgentsAPIAutogenToolsCreateToolRequestInput {
            name: string;
            type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
            /**
             * API call definition
             */
            api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
            bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
            /**
             * Anthropic new tools
             */
            computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
            description?: string | null;
            /**
             * Function definition
             */
            function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
            /**
             * Brave integration definition
             */
            integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
            /**
             * System definition
             */
            system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
            text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
        }
        namespace AgentsAPIAutogenToolsCreateToolRequestInput {
            /**
             * API call definition
             */
            interface APICall {
                method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                url: string;
                content?: string | null;
                cookies?: Record<string, string> | null;
                data?: unknown | null;
                files?: unknown | null;
                follow_redirects?: boolean | null;
                headers?: Record<string, string> | null;
                json?: unknown | null;
                params?: string | unknown | null;
                schema?: unknown | null;
                timeout?: number | null;
            }
            interface Bash20241022 {
                name?: string;
                type?: 'bash_20241022';
            }
            /**
             * Anthropic new tools
             */
            interface Computer20241022 {
                display_height_px?: number;
                display_number?: number;
                display_width_px?: number;
                name?: string;
                type?: 'computer_20241022';
            }
            /**
             * Function definition
             */
            interface Function {
                description?: unknown;
                name?: unknown;
                parameters?: unknown | null;
            }
            interface DummyIntegrationDef {
                arguments?: unknown;
                method?: string | null;
                provider?: 'dummy';
                setup?: unknown;
            }
            /**
             * Brave integration definition
             */
            interface BraveIntegrationDef {
                /**
                 * Arguments for Brave Search
                 */
                arguments?: BraveIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'brave';
                /**
                 * Integration definition for Brave Search
                 */
                setup?: BraveIntegrationDef.Setup | null;
            }
            namespace BraveIntegrationDef {
                /**
                 * Arguments for Brave Search
                 */
                interface Arguments {
                    query: string;
                }
                /**
                 * Integration definition for Brave Search
                 */
                interface Setup {
                    brave_api_key: string;
                }
            }
            /**
             * Email integration definition
             */
            interface EmailIntegrationDef {
                /**
                 * Arguments for Email sending
                 */
                arguments?: EmailIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'email';
                /**
                 * Setup parameters for Email integration
                 */
                setup?: EmailIntegrationDef.Setup | null;
            }
            namespace EmailIntegrationDef {
                /**
                 * Arguments for Email sending
                 */
                interface Arguments {
                    body: string;
                    from: string;
                    subject: string;
                    to: string;
                }
                /**
                 * Setup parameters for Email integration
                 */
                interface Setup {
                    host: string;
                    password: string;
                    port: number;
                    user: string;
                }
            }
            /**
             * Spider integration definition
             */
            interface SpiderIntegrationDef {
                /**
                 * Arguments for Spider integration
                 */
                arguments?: SpiderIntegrationDef.Arguments | null;
                method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                provider?: 'spider';
                /**
                 * Setup parameters for Spider integration
                 */
                setup?: SpiderIntegrationDef.Setup | null;
            }
            namespace SpiderIntegrationDef {
                /**
                 * Arguments for Spider integration
                 */
                interface Arguments {
                    url: string;
                    content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                    params?: unknown | null;
                }
                /**
                 * Setup parameters for Spider integration
                 */
                interface Setup {
                    spider_api_key: string;
                }
            }
            /**
             * Wikipedia integration definition
             */
            interface WikipediaIntegrationDef {
                /**
                 * Arguments for Wikipedia Search
                 */
                arguments?: WikipediaIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'wikipedia';
                setup?: unknown;
            }
            namespace WikipediaIntegrationDef {
                /**
                 * Arguments for Wikipedia Search
                 */
                interface Arguments {
                    query: string;
                    load_max_docs?: number;
                }
            }
            /**
             * Weather integration definition
             */
            interface WeatherIntegrationDef {
                /**
                 * Arguments for Weather
                 */
                arguments?: WeatherIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'weather';
                /**
                 * Integration definition for Weather
                 */
                setup?: WeatherIntegrationDef.Setup | null;
            }
            namespace WeatherIntegrationDef {
                /**
                 * Arguments for Weather
                 */
                interface Arguments {
                    location: string;
                }
                /**
                 * Integration definition for Weather
                 */
                interface Setup {
                    openweathermap_api_key: string;
                }
            }
            /**
             * browserbase context provider
             */
            interface BrowserbaseContextIntegrationDef {
                arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                method?: 'create_context';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseContextIntegrationDef.Setup | null;
            }
            namespace BrowserbaseContextIntegrationDef {
                interface Arguments {
                    projectId: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase extension provider
             */
            interface BrowserbaseExtensionIntegrationDef {
                arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                method?: 'install_extension_from_github' | null;
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseExtensionIntegrationDef {
                interface Arguments {
                    repositoryName: string;
                    ref?: string | null;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase list sessions integration definition
             */
            interface BrowserbaseListSessionsIntegrationDef {
                arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                method?: 'list_sessions';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
            }
            namespace BrowserbaseListSessionsIntegrationDef {
                interface Arguments {
                    status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase create session integration definition
             */
            interface BrowserbaseCreateSessionIntegrationDef {
                arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                method?: 'create_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseCreateSessionIntegrationDef {
                interface Arguments {
                    browserSettings?: unknown;
                    extensionId?: string | null;
                    keepAlive?: boolean;
                    projectId?: string | null;
                    proxies?: boolean | Array<unknown>;
                    timeout?: number;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase get session integration definition
             */
            interface BrowserbaseGetSessionIntegrationDef {
                arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                method?: 'get_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseGetSessionIntegrationDef {
                interface Arguments {
                    id: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase complete session integration definition
             */
            interface BrowserbaseCompleteSessionIntegrationDef {
                arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                method?: 'complete_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseCompleteSessionIntegrationDef {
                interface Arguments {
                    id: string;
                    status?: 'REQUEST_RELEASE';
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase get session live urls integration definition
             */
            interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                method?: 'get_live_urls';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
            }
            namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                interface Arguments {
                    id: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * The integration definition for the remote browser
             */
            interface RemoteBrowserIntegrationDef {
                /**
                 * The setup parameters for the remote browser
                 */
                setup: RemoteBrowserIntegrationDef.Setup;
                /**
                 * The arguments for the remote browser
                 */
                arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                method?: 'perform_action';
                provider?: 'remote_browser';
            }
            namespace RemoteBrowserIntegrationDef {
                /**
                 * The setup parameters for the remote browser
                 */
                interface Setup {
                    connect_url?: string | null;
                    height?: number | null;
                    width?: number | null;
                }
                /**
                 * The arguments for the remote browser
                 */
                interface Arguments {
                    action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                    connect_url?: string | null;
                    coordinate?: Array<unknown> | null;
                    text?: string | null;
                }
            }
            /**
             * LlamaParse integration definition
             */
            interface LlamaParseIntegrationDef {
                /**
                 * Arguments for LlamaParse integration
                 */
                arguments?: LlamaParseIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'llama_parse';
                /**
                 * Setup parameters for LlamaParse integration
                 */
                setup?: LlamaParseIntegrationDef.Setup | null;
            }
            namespace LlamaParseIntegrationDef {
                /**
                 * Arguments for LlamaParse integration
                 */
                interface Arguments {
                    file: string | Array<string>;
                    base64?: boolean;
                    filename?: string | null;
                    params?: unknown | null;
                }
                /**
                 * Setup parameters for LlamaParse integration
                 */
                interface Setup {
                    llamaparse_api_key: string;
                    params?: unknown | null;
                }
            }
            /**
             * Ffmpeg integration definition
             */
            interface FfmpegIntegrationDef {
                /**
                 * Arguments for Ffmpeg CMD
                 */
                arguments?: FfmpegIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'ffmpeg';
                setup?: unknown;
            }
            namespace FfmpegIntegrationDef {
                /**
                 * Arguments for Ffmpeg CMD
                 */
                interface Arguments {
                    cmd: string;
                    file?: string | Array<string> | null;
                }
            }
            /**
             * Cloudinary upload integration definition
             */
            interface CloudinaryUploadIntegrationDef {
                /**
                 * Arguments for Cloudinary media upload
                 */
                arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                method?: 'media_upload';
                provider?: 'cloudinary';
                /**
                 * Setup parameters for Cloudinary integration
                 */
                setup?: CloudinaryUploadIntegrationDef.Setup | null;
            }
            namespace CloudinaryUploadIntegrationDef {
                /**
                 * Arguments for Cloudinary media upload
                 */
                interface Arguments {
                    file: string;
                    public_id?: string | null;
                    return_base64?: boolean;
                    upload_params?: unknown | null;
                }
                /**
                 * Setup parameters for Cloudinary integration
                 */
                interface Setup {
                    cloudinary_api_key: string;
                    cloudinary_api_secret: string;
                    cloudinary_cloud_name: string;
                    params?: unknown | null;
                }
            }
            /**
             * Cloudinary edit integration definition
             */
            interface CloudinaryEditIntegrationDef {
                /**
                 * Arguments for Cloudinary media edit
                 */
                arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                method?: 'media_edit';
                provider?: 'cloudinary';
                /**
                 * Setup parameters for Cloudinary integration
                 */
                setup?: CloudinaryEditIntegrationDef.Setup | null;
            }
            namespace CloudinaryEditIntegrationDef {
                /**
                 * Arguments for Cloudinary media edit
                 */
                interface Arguments {
                    public_id: string;
                    transformation: Array<unknown>;
                    return_base64?: boolean;
                }
                /**
                 * Setup parameters for Cloudinary integration
                 */
                interface Setup {
                    cloudinary_api_key: string;
                    cloudinary_api_secret: string;
                    cloudinary_cloud_name: string;
                    params?: unknown | null;
                }
            }
            /**
             * Arxiv integration definition
             */
            interface ArxivIntegrationDef {
                /**
                 * Arguments for Arxiv Search
                 */
                arguments?: ArxivIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'arxiv';
                setup?: unknown;
            }
            namespace ArxivIntegrationDef {
                /**
                 * Arguments for Arxiv Search
                 */
                interface Arguments {
                    query: string;
                    download_pdf?: boolean;
                    id_list?: Array<string> | null;
                    max_results?: number;
                    sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                    sort_order?: 'ascending' | 'descending';
                }
            }
            /**
             * Unstructured integration definition
             */
            interface UnstructuredIntegrationDef {
                /**
                 * Arguments for Unstructured partition integration
                 */
                arguments?: UnstructuredIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'unstructured';
                /**
                 * Setup parameters for Unstructured integration
                 */
                setup?: UnstructuredIntegrationDef.Setup | null;
            }
            namespace UnstructuredIntegrationDef {
                /**
                 * Arguments for Unstructured partition integration
                 */
                interface Arguments {
                    file: string;
                    filename?: string | null;
                    partition_params?: unknown | null;
                }
                /**
                 * Setup parameters for Unstructured integration
                 */
                interface Setup {
                    unstructured_api_key: string;
                    retry_config?: unknown | null;
                    server?: string | null;
                    server_url?: string | null;
                    timeout_ms?: number | null;
                    url_params?: unknown | null;
                }
            }
            /**
             * Algolia integration definition
             */
            interface AlgoliaIntegrationDef {
                /**
                 * Arguments for Algolia Search
                 */
                arguments?: AlgoliaIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'algolia';
                /**
                 * Integration definition for Algolia
                 */
                setup?: AlgoliaIntegrationDef.Setup | null;
            }
            namespace AlgoliaIntegrationDef {
                /**
                 * Arguments for Algolia Search
                 */
                interface Arguments {
                    index_name: string;
                    query: string;
                    attributes_to_retrieve?: Array<string> | null;
                    hits_per_page?: number;
                }
                /**
                 * Integration definition for Algolia
                 */
                interface Setup {
                    algolia_api_key: string;
                    algolia_application_id: string;
                }
            }
            /**
             * System definition
             */
            interface System {
                operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                arguments?: unknown | null;
                resource_id?: string | null;
                subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
            }
            interface TextEditor20241022 {
                name?: string;
                type?: 'text_editor_20241022';
            }
        }
    }
    interface GetStep {
        get: string;
        label?: string | null;
    }
    interface SetStep {
        set: Record<string, unknown | string>;
        label?: string | null;
    }
    interface LogStep {
        log: string;
        label?: string | null;
    }
    interface YieldStep {
        workflow: string;
        arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
        label?: string | null;
    }
    interface ReturnStep {
        return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
        label?: string | null;
    }
    interface SleepStep {
        sleep: SleepStep.Sleep;
        label?: string | null;
    }
    namespace SleepStep {
        interface Sleep {
            days?: number;
            hours?: number;
            minutes?: number;
            seconds?: number;
        }
    }
    interface ErrorWorkflowStep {
        error: string;
        label?: string | null;
    }
    interface WaitForInputStep {
        wait_for_input: WaitForInputStep.WaitForInput;
        label?: string | null;
    }
    namespace WaitForInputStep {
        interface WaitForInput {
            info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
        }
    }
    interface IfElseWorkflowStepInput {
        if: string;
        /**
         * The steps to run if the condition is true
         */
        then: IfElseWorkflowStepInput.WaitForInputStep | IfElseWorkflowStepInput.EvaluateStep | IfElseWorkflowStepInput.ToolCallStep | IfElseWorkflowStepInput.PromptStepInput | IfElseWorkflowStepInput.GetStep | IfElseWorkflowStepInput.SetStep | IfElseWorkflowStepInput.LogStep | IfElseWorkflowStepInput.YieldStep | IfElseWorkflowStepInput.ReturnStep | IfElseWorkflowStepInput.SleepStep | IfElseWorkflowStepInput.ErrorWorkflowStep | unknown | IfElseWorkflowStepInput.SwitchStepInput | IfElseWorkflowStepInput.ForeachStepInput | IfElseWorkflowStepInput.ParallelStepInput | IfElseWorkflowStepInput.ThenInput;
        /**
         * The steps to run if the condition is false
         */
        else?: IfElseWorkflowStepInput.WaitForInputStep | IfElseWorkflowStepInput.EvaluateStep | IfElseWorkflowStepInput.ToolCallStep | IfElseWorkflowStepInput.PromptStepInput | IfElseWorkflowStepInput.GetStep | IfElseWorkflowStepInput.SetStep | IfElseWorkflowStepInput.LogStep | IfElseWorkflowStepInput.YieldStep | IfElseWorkflowStepInput.ReturnStep | IfElseWorkflowStepInput.SleepStep | IfElseWorkflowStepInput.ErrorWorkflowStep | unknown | IfElseWorkflowStepInput.SwitchStepInput | IfElseWorkflowStepInput.ForeachStepInput | IfElseWorkflowStepInput.ParallelStepInput | IfElseWorkflowStepInput.ElseInput | null;
        label?: string | null;
    }
    namespace IfElseWorkflowStepInput {
        interface WaitForInputStep {
            wait_for_input: WaitForInputStep.WaitForInput;
            label?: string | null;
        }
        namespace WaitForInputStep {
            interface WaitForInput {
                info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            }
        }
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
        interface ReturnStep {
            return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            label?: string | null;
        }
        interface SleepStep {
            sleep: SleepStep.Sleep;
            label?: string | null;
        }
        namespace SleepStep {
            interface Sleep {
                days?: number;
                hours?: number;
                minutes?: number;
                seconds?: number;
            }
        }
        interface ErrorWorkflowStep {
            error: string;
            label?: string | null;
        }
        interface SwitchStepInput {
            switch: Array<SwitchStepInput.Switch>;
            label?: string | null;
        }
        namespace SwitchStepInput {
            interface Switch {
                case: '_';
                then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepInput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
            }
            namespace Switch {
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
                interface ReturnStep {
                    return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    label?: string | null;
                }
                interface SleepStep {
                    sleep: SleepStep.Sleep;
                    label?: string | null;
                }
                namespace SleepStep {
                    interface Sleep {
                        days?: number;
                        hours?: number;
                        minutes?: number;
                        seconds?: number;
                    }
                }
                interface ErrorWorkflowStep {
                    error: string;
                    label?: string | null;
                }
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
            }
        }
        interface ForeachStepInput {
            foreach: ForeachStepInput.Foreach;
            label?: string | null;
        }
        namespace ForeachStepInput {
            interface Foreach {
                do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepInput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
                in: string;
            }
            namespace Foreach {
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
            }
        }
        interface ParallelStepInput {
            parallel: Array<ParallelStepInput.EvaluateStep | ParallelStepInput.ToolCallStep | ParallelStepInput.PromptStepInput | ParallelStepInput.GetStep | ParallelStepInput.SetStep | ParallelStepInput.LogStep | ParallelStepInput.YieldStep>;
            label?: string | null;
        }
        namespace ParallelStepInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
        /**
         * The steps to run if the condition is true
         */
        interface ThenInput {
            map: ThenInput.EvaluateStep | ThenInput.ToolCallStep | ThenInput.PromptStepInput | ThenInput.GetStep | ThenInput.SetStep | ThenInput.LogStep | ThenInput.YieldStep;
            over: string;
            initial?: unknown;
            label?: string | null;
            parallelism?: number | null;
            reduce?: string | null;
        }
        namespace ThenInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
        interface WaitForInputStep {
            wait_for_input: WaitForInputStep.WaitForInput;
            label?: string | null;
        }
        namespace WaitForInputStep {
            interface WaitForInput {
                info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            }
        }
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
        interface ReturnStep {
            return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            label?: string | null;
        }
        interface SleepStep {
            sleep: SleepStep.Sleep;
            label?: string | null;
        }
        namespace SleepStep {
            interface Sleep {
                days?: number;
                hours?: number;
                minutes?: number;
                seconds?: number;
            }
        }
        interface ErrorWorkflowStep {
            error: string;
            label?: string | null;
        }
        interface SwitchStepInput {
            switch: Array<SwitchStepInput.Switch>;
            label?: string | null;
        }
        namespace SwitchStepInput {
            interface Switch {
                case: '_';
                then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepInput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
            }
            namespace Switch {
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
                interface ReturnStep {
                    return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    label?: string | null;
                }
                interface SleepStep {
                    sleep: SleepStep.Sleep;
                    label?: string | null;
                }
                namespace SleepStep {
                    interface Sleep {
                        days?: number;
                        hours?: number;
                        minutes?: number;
                        seconds?: number;
                    }
                }
                interface ErrorWorkflowStep {
                    error: string;
                    label?: string | null;
                }
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
            }
        }
        interface ForeachStepInput {
            foreach: ForeachStepInput.Foreach;
            label?: string | null;
        }
        namespace ForeachStepInput {
            interface Foreach {
                do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepInput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
                in: string;
            }
            namespace Foreach {
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
            }
        }
        interface ParallelStepInput {
            parallel: Array<ParallelStepInput.EvaluateStep | ParallelStepInput.ToolCallStep | ParallelStepInput.PromptStepInput | ParallelStepInput.GetStep | ParallelStepInput.SetStep | ParallelStepInput.LogStep | ParallelStepInput.YieldStep>;
            label?: string | null;
        }
        namespace ParallelStepInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
        /**
         * The steps to run if the condition is false
         */
        interface ElseInput {
            map: ElseInput.EvaluateStep | ElseInput.ToolCallStep | ElseInput.PromptStepInput | ElseInput.GetStep | ElseInput.SetStep | ElseInput.LogStep | ElseInput.YieldStep;
            over: string;
            initial?: unknown;
            label?: string | null;
            parallelism?: number | null;
            reduce?: string | null;
        }
        namespace ElseInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
    }
    interface SwitchStepInput {
        switch: Array<SwitchStepInput.Switch>;
        label?: string | null;
    }
    namespace SwitchStepInput {
        interface Switch {
            case: '_';
            then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepInput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
        }
        namespace Switch {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
            interface ReturnStep {
                return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                label?: string | null;
            }
            interface SleepStep {
                sleep: SleepStep.Sleep;
                label?: string | null;
            }
            namespace SleepStep {
                interface Sleep {
                    days?: number;
                    hours?: number;
                    minutes?: number;
                    seconds?: number;
                }
            }
            interface ErrorWorkflowStep {
                error: string;
                label?: string | null;
            }
            interface WaitForInputStep {
                wait_for_input: WaitForInputStep.WaitForInput;
                label?: string | null;
            }
            namespace WaitForInputStep {
                interface WaitForInput {
                    info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                }
            }
        }
    }
    interface ForeachStepInput {
        foreach: ForeachStepInput.Foreach;
        label?: string | null;
    }
    namespace ForeachStepInput {
        interface Foreach {
            do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepInput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
            in: string;
        }
        namespace Foreach {
            interface WaitForInputStep {
                wait_for_input: WaitForInputStep.WaitForInput;
                label?: string | null;
            }
            namespace WaitForInputStep {
                interface WaitForInput {
                    info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                }
            }
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
    }
    interface ParallelStepInput {
        parallel: Array<ParallelStepInput.EvaluateStep | ParallelStepInput.ToolCallStep | ParallelStepInput.PromptStepInput | ParallelStepInput.GetStep | ParallelStepInput.SetStep | ParallelStepInput.LogStep | ParallelStepInput.YieldStep>;
        label?: string | null;
    }
    namespace ParallelStepInput {
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
    }
    interface MainInput {
        map: MainInput.EvaluateStep | MainInput.ToolCallStep | MainInput.PromptStepInput | MainInput.GetStep | MainInput.SetStep | MainInput.LogStep | MainInput.YieldStep;
        over: string;
        initial?: unknown;
        label?: string | null;
        parallelism?: number | null;
        reduce?: string | null;
    }
    namespace MainInput {
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
    }
    interface Tool {
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
}
export interface TaskListParams extends OffsetPaginationParams {
    direction?: 'asc' | 'desc';
    sort_by?: 'created_at' | 'updated_at';
}
export interface TaskCreateOrUpdateParams {
    main: Array<TaskCreateOrUpdateParams.EvaluateStep | TaskCreateOrUpdateParams.ToolCallStep | TaskCreateOrUpdateParams.PromptStepInput | TaskCreateOrUpdateParams.GetStep | TaskCreateOrUpdateParams.SetStep | TaskCreateOrUpdateParams.LogStep | TaskCreateOrUpdateParams.YieldStep | TaskCreateOrUpdateParams.ReturnStep | TaskCreateOrUpdateParams.SleepStep | TaskCreateOrUpdateParams.ErrorWorkflowStep | TaskCreateOrUpdateParams.WaitForInputStep | TaskCreateOrUpdateParams.IfElseWorkflowStepInput | TaskCreateOrUpdateParams.SwitchStepInput | TaskCreateOrUpdateParams.ForeachStepInput | TaskCreateOrUpdateParams.ParallelStepInput | TaskCreateOrUpdateParams.MainInput>;
    name: string;
    canonical_name?: string | null;
    description?: string;
    inherit_tools?: boolean;
    input_schema?: unknown | null;
    metadata?: unknown | null;
    tools?: Array<TaskCreateOrUpdateParams.Tool>;
    [k: string]: unknown;
}
export declare namespace TaskCreateOrUpdateParams {
    interface EvaluateStep {
        evaluate: Record<string, unknown | string>;
        label?: string | null;
    }
    interface ToolCallStep {
        tool: string;
        arguments?: unknown | '_';
        label?: string | null;
    }
    interface PromptStepInput {
        prompt: Array<PromptStepInput.UnionMember0> | string;
        auto_run_tools?: boolean;
        disable_cache?: boolean;
        label?: string | null;
        settings?: unknown | null;
        tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
        tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
        unwrap?: boolean;
    }
    namespace PromptStepInput {
        interface UnionMember0 {
            content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
            role: 'user' | 'assistant' | 'system' | 'tool';
            continue?: boolean | null;
            name?: string | null;
            tool_call_id?: string | null;
            tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
        }
        namespace UnionMember0 {
            interface Content {
                text: string;
                type?: 'text';
            }
            interface AgentsAPIAutogenTasksContentModel {
                /**
                 * The image URL
                 */
                image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                type?: 'image_url';
            }
            namespace AgentsAPIAutogenTasksContentModel {
                /**
                 * The image URL
                 */
                interface ImageURL {
                    url: string;
                    detail?: 'low' | 'high' | 'auto';
                }
            }
            /**
             * Anthropic image content part
             */
            interface ContentModel1Input {
                content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                tool_use_id: string;
                type?: 'tool_result';
            }
            namespace ContentModel1Input {
                interface UnionMember0 {
                    text: string;
                    type?: 'text';
                }
                interface UnionMember1 {
                    source: UnionMember1.Source;
                    type?: 'image';
                }
                namespace UnionMember1 {
                    interface Source {
                        data: string;
                        media_type: string;
                        type?: 'base64';
                    }
                }
            }
            interface ChosenFunctionCall {
                function: ChosenFunctionCall.Function;
                api_call?: unknown;
                bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                integration?: unknown;
                system?: unknown;
                text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                type?: 'function';
            }
            namespace ChosenFunctionCall {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
                interface Bash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
                interface Computer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface TextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
            }
            interface ChosenComputer20241022 {
                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                coordinate?: Array<number> | null;
                text?: string | null;
            }
            interface ChosenTextEditor20241022 {
                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                path: string;
                file_text?: string | null;
                insert_line?: number | null;
                new_str?: string | null;
                old_str?: string | null;
                view_range?: Array<number> | null;
            }
            interface ChosenBash20241022 {
                command?: string | null;
                restart?: boolean;
            }
        }
        interface NamedToolChoice {
            function?: NamedToolChoice.Function | null;
        }
        namespace NamedToolChoice {
            interface Function {
                name: string;
                arguments?: string | null;
            }
        }
        /**
         * Reference to a tool
         */
        interface ToolRef {
            /**
             * Reference to a tool by id
             */
            ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
        }
        namespace ToolRef {
            /**
             * Reference to a tool by id
             */
            interface ToolRefByID {
                id?: string | null;
            }
            /**
             * Reference to a tool by name
             */
            interface ToolRefByName {
                name?: string | null;
            }
        }
        /**
         * Payload for creating a tool
         */
        interface AgentsAPIAutogenToolsCreateToolRequestInput {
            name: string;
            type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
            /**
             * API call definition
             */
            api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
            bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
            /**
             * Anthropic new tools
             */
            computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
            description?: string | null;
            /**
             * Function definition
             */
            function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
            /**
             * Brave integration definition
             */
            integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
            /**
             * System definition
             */
            system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
            text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
        }
        namespace AgentsAPIAutogenToolsCreateToolRequestInput {
            /**
             * API call definition
             */
            interface APICall {
                method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                url: string;
                content?: string | null;
                cookies?: Record<string, string> | null;
                data?: unknown | null;
                files?: unknown | null;
                follow_redirects?: boolean | null;
                headers?: Record<string, string> | null;
                json?: unknown | null;
                params?: string | unknown | null;
                schema?: unknown | null;
                timeout?: number | null;
            }
            interface Bash20241022 {
                name?: string;
                type?: 'bash_20241022';
            }
            /**
             * Anthropic new tools
             */
            interface Computer20241022 {
                display_height_px?: number;
                display_number?: number;
                display_width_px?: number;
                name?: string;
                type?: 'computer_20241022';
            }
            /**
             * Function definition
             */
            interface Function {
                description?: unknown;
                name?: unknown;
                parameters?: unknown | null;
            }
            interface DummyIntegrationDef {
                arguments?: unknown;
                method?: string | null;
                provider?: 'dummy';
                setup?: unknown;
            }
            /**
             * Brave integration definition
             */
            interface BraveIntegrationDef {
                /**
                 * Arguments for Brave Search
                 */
                arguments?: BraveIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'brave';
                /**
                 * Integration definition for Brave Search
                 */
                setup?: BraveIntegrationDef.Setup | null;
            }
            namespace BraveIntegrationDef {
                /**
                 * Arguments for Brave Search
                 */
                interface Arguments {
                    query: string;
                }
                /**
                 * Integration definition for Brave Search
                 */
                interface Setup {
                    brave_api_key: string;
                }
            }
            /**
             * Email integration definition
             */
            interface EmailIntegrationDef {
                /**
                 * Arguments for Email sending
                 */
                arguments?: EmailIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'email';
                /**
                 * Setup parameters for Email integration
                 */
                setup?: EmailIntegrationDef.Setup | null;
            }
            namespace EmailIntegrationDef {
                /**
                 * Arguments for Email sending
                 */
                interface Arguments {
                    body: string;
                    from: string;
                    subject: string;
                    to: string;
                }
                /**
                 * Setup parameters for Email integration
                 */
                interface Setup {
                    host: string;
                    password: string;
                    port: number;
                    user: string;
                }
            }
            /**
             * Spider integration definition
             */
            interface SpiderIntegrationDef {
                /**
                 * Arguments for Spider integration
                 */
                arguments?: SpiderIntegrationDef.Arguments | null;
                method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                provider?: 'spider';
                /**
                 * Setup parameters for Spider integration
                 */
                setup?: SpiderIntegrationDef.Setup | null;
            }
            namespace SpiderIntegrationDef {
                /**
                 * Arguments for Spider integration
                 */
                interface Arguments {
                    url: string;
                    content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                    params?: unknown | null;
                }
                /**
                 * Setup parameters for Spider integration
                 */
                interface Setup {
                    spider_api_key: string;
                }
            }
            /**
             * Wikipedia integration definition
             */
            interface WikipediaIntegrationDef {
                /**
                 * Arguments for Wikipedia Search
                 */
                arguments?: WikipediaIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'wikipedia';
                setup?: unknown;
            }
            namespace WikipediaIntegrationDef {
                /**
                 * Arguments for Wikipedia Search
                 */
                interface Arguments {
                    query: string;
                    load_max_docs?: number;
                }
            }
            /**
             * Weather integration definition
             */
            interface WeatherIntegrationDef {
                /**
                 * Arguments for Weather
                 */
                arguments?: WeatherIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'weather';
                /**
                 * Integration definition for Weather
                 */
                setup?: WeatherIntegrationDef.Setup | null;
            }
            namespace WeatherIntegrationDef {
                /**
                 * Arguments for Weather
                 */
                interface Arguments {
                    location: string;
                }
                /**
                 * Integration definition for Weather
                 */
                interface Setup {
                    openweathermap_api_key: string;
                }
            }
            /**
             * browserbase context provider
             */
            interface BrowserbaseContextIntegrationDef {
                arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                method?: 'create_context';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseContextIntegrationDef.Setup | null;
            }
            namespace BrowserbaseContextIntegrationDef {
                interface Arguments {
                    projectId: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase extension provider
             */
            interface BrowserbaseExtensionIntegrationDef {
                arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                method?: 'install_extension_from_github' | null;
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseExtensionIntegrationDef {
                interface Arguments {
                    repositoryName: string;
                    ref?: string | null;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase list sessions integration definition
             */
            interface BrowserbaseListSessionsIntegrationDef {
                arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                method?: 'list_sessions';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
            }
            namespace BrowserbaseListSessionsIntegrationDef {
                interface Arguments {
                    status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase create session integration definition
             */
            interface BrowserbaseCreateSessionIntegrationDef {
                arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                method?: 'create_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseCreateSessionIntegrationDef {
                interface Arguments {
                    browserSettings?: unknown;
                    extensionId?: string | null;
                    keepAlive?: boolean;
                    projectId?: string | null;
                    proxies?: boolean | Array<unknown>;
                    timeout?: number;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase get session integration definition
             */
            interface BrowserbaseGetSessionIntegrationDef {
                arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                method?: 'get_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseGetSessionIntegrationDef {
                interface Arguments {
                    id: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase complete session integration definition
             */
            interface BrowserbaseCompleteSessionIntegrationDef {
                arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                method?: 'complete_session';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
            }
            namespace BrowserbaseCompleteSessionIntegrationDef {
                interface Arguments {
                    id: string;
                    status?: 'REQUEST_RELEASE';
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * browserbase get session live urls integration definition
             */
            interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                method?: 'get_live_urls';
                provider?: 'browserbase';
                /**
                 * The setup parameters for the browserbase integration
                 */
                setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
            }
            namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                interface Arguments {
                    id: string;
                }
                /**
                 * The setup parameters for the browserbase integration
                 */
                interface Setup {
                    api_key: string;
                    project_id: string;
                    api_url?: string | null;
                    connect_url?: string | null;
                }
            }
            /**
             * The integration definition for the remote browser
             */
            interface RemoteBrowserIntegrationDef {
                /**
                 * The setup parameters for the remote browser
                 */
                setup: RemoteBrowserIntegrationDef.Setup;
                /**
                 * The arguments for the remote browser
                 */
                arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                method?: 'perform_action';
                provider?: 'remote_browser';
            }
            namespace RemoteBrowserIntegrationDef {
                /**
                 * The setup parameters for the remote browser
                 */
                interface Setup {
                    connect_url?: string | null;
                    height?: number | null;
                    width?: number | null;
                }
                /**
                 * The arguments for the remote browser
                 */
                interface Arguments {
                    action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                    connect_url?: string | null;
                    coordinate?: Array<unknown> | null;
                    text?: string | null;
                }
            }
            /**
             * LlamaParse integration definition
             */
            interface LlamaParseIntegrationDef {
                /**
                 * Arguments for LlamaParse integration
                 */
                arguments?: LlamaParseIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'llama_parse';
                /**
                 * Setup parameters for LlamaParse integration
                 */
                setup?: LlamaParseIntegrationDef.Setup | null;
            }
            namespace LlamaParseIntegrationDef {
                /**
                 * Arguments for LlamaParse integration
                 */
                interface Arguments {
                    file: string | Array<string>;
                    base64?: boolean;
                    filename?: string | null;
                    params?: unknown | null;
                }
                /**
                 * Setup parameters for LlamaParse integration
                 */
                interface Setup {
                    llamaparse_api_key: string;
                    params?: unknown | null;
                }
            }
            /**
             * Ffmpeg integration definition
             */
            interface FfmpegIntegrationDef {
                /**
                 * Arguments for Ffmpeg CMD
                 */
                arguments?: FfmpegIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'ffmpeg';
                setup?: unknown;
            }
            namespace FfmpegIntegrationDef {
                /**
                 * Arguments for Ffmpeg CMD
                 */
                interface Arguments {
                    cmd: string;
                    file?: string | Array<string> | null;
                }
            }
            /**
             * Cloudinary upload integration definition
             */
            interface CloudinaryUploadIntegrationDef {
                /**
                 * Arguments for Cloudinary media upload
                 */
                arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                method?: 'media_upload';
                provider?: 'cloudinary';
                /**
                 * Setup parameters for Cloudinary integration
                 */
                setup?: CloudinaryUploadIntegrationDef.Setup | null;
            }
            namespace CloudinaryUploadIntegrationDef {
                /**
                 * Arguments for Cloudinary media upload
                 */
                interface Arguments {
                    file: string;
                    public_id?: string | null;
                    return_base64?: boolean;
                    upload_params?: unknown | null;
                }
                /**
                 * Setup parameters for Cloudinary integration
                 */
                interface Setup {
                    cloudinary_api_key: string;
                    cloudinary_api_secret: string;
                    cloudinary_cloud_name: string;
                    params?: unknown | null;
                }
            }
            /**
             * Cloudinary edit integration definition
             */
            interface CloudinaryEditIntegrationDef {
                /**
                 * Arguments for Cloudinary media edit
                 */
                arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                method?: 'media_edit';
                provider?: 'cloudinary';
                /**
                 * Setup parameters for Cloudinary integration
                 */
                setup?: CloudinaryEditIntegrationDef.Setup | null;
            }
            namespace CloudinaryEditIntegrationDef {
                /**
                 * Arguments for Cloudinary media edit
                 */
                interface Arguments {
                    public_id: string;
                    transformation: Array<unknown>;
                    return_base64?: boolean;
                }
                /**
                 * Setup parameters for Cloudinary integration
                 */
                interface Setup {
                    cloudinary_api_key: string;
                    cloudinary_api_secret: string;
                    cloudinary_cloud_name: string;
                    params?: unknown | null;
                }
            }
            /**
             * Arxiv integration definition
             */
            interface ArxivIntegrationDef {
                /**
                 * Arguments for Arxiv Search
                 */
                arguments?: ArxivIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'arxiv';
                setup?: unknown;
            }
            namespace ArxivIntegrationDef {
                /**
                 * Arguments for Arxiv Search
                 */
                interface Arguments {
                    query: string;
                    download_pdf?: boolean;
                    id_list?: Array<string> | null;
                    max_results?: number;
                    sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                    sort_order?: 'ascending' | 'descending';
                }
            }
            /**
             * Unstructured integration definition
             */
            interface UnstructuredIntegrationDef {
                /**
                 * Arguments for Unstructured partition integration
                 */
                arguments?: UnstructuredIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'unstructured';
                /**
                 * Setup parameters for Unstructured integration
                 */
                setup?: UnstructuredIntegrationDef.Setup | null;
            }
            namespace UnstructuredIntegrationDef {
                /**
                 * Arguments for Unstructured partition integration
                 */
                interface Arguments {
                    file: string;
                    filename?: string | null;
                    partition_params?: unknown | null;
                }
                /**
                 * Setup parameters for Unstructured integration
                 */
                interface Setup {
                    unstructured_api_key: string;
                    retry_config?: unknown | null;
                    server?: string | null;
                    server_url?: string | null;
                    timeout_ms?: number | null;
                    url_params?: unknown | null;
                }
            }
            /**
             * Algolia integration definition
             */
            interface AlgoliaIntegrationDef {
                /**
                 * Arguments for Algolia Search
                 */
                arguments?: AlgoliaIntegrationDef.Arguments | null;
                method?: string | null;
                provider?: 'algolia';
                /**
                 * Integration definition for Algolia
                 */
                setup?: AlgoliaIntegrationDef.Setup | null;
            }
            namespace AlgoliaIntegrationDef {
                /**
                 * Arguments for Algolia Search
                 */
                interface Arguments {
                    index_name: string;
                    query: string;
                    attributes_to_retrieve?: Array<string> | null;
                    hits_per_page?: number;
                }
                /**
                 * Integration definition for Algolia
                 */
                interface Setup {
                    algolia_api_key: string;
                    algolia_application_id: string;
                }
            }
            /**
             * System definition
             */
            interface System {
                operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                arguments?: unknown | null;
                resource_id?: string | null;
                subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
            }
            interface TextEditor20241022 {
                name?: string;
                type?: 'text_editor_20241022';
            }
        }
    }
    interface GetStep {
        get: string;
        label?: string | null;
    }
    interface SetStep {
        set: Record<string, unknown | string>;
        label?: string | null;
    }
    interface LogStep {
        log: string;
        label?: string | null;
    }
    interface YieldStep {
        workflow: string;
        arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
        label?: string | null;
    }
    interface ReturnStep {
        return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
        label?: string | null;
    }
    interface SleepStep {
        sleep: SleepStep.Sleep;
        label?: string | null;
    }
    namespace SleepStep {
        interface Sleep {
            days?: number;
            hours?: number;
            minutes?: number;
            seconds?: number;
        }
    }
    interface ErrorWorkflowStep {
        error: string;
        label?: string | null;
    }
    interface WaitForInputStep {
        wait_for_input: WaitForInputStep.WaitForInput;
        label?: string | null;
    }
    namespace WaitForInputStep {
        interface WaitForInput {
            info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
        }
    }
    interface IfElseWorkflowStepInput {
        if: string;
        /**
         * The steps to run if the condition is true
         */
        then: IfElseWorkflowStepInput.WaitForInputStep | IfElseWorkflowStepInput.EvaluateStep | IfElseWorkflowStepInput.ToolCallStep | IfElseWorkflowStepInput.PromptStepInput | IfElseWorkflowStepInput.GetStep | IfElseWorkflowStepInput.SetStep | IfElseWorkflowStepInput.LogStep | IfElseWorkflowStepInput.YieldStep | IfElseWorkflowStepInput.ReturnStep | IfElseWorkflowStepInput.SleepStep | IfElseWorkflowStepInput.ErrorWorkflowStep | unknown | IfElseWorkflowStepInput.SwitchStepInput | IfElseWorkflowStepInput.ForeachStepInput | IfElseWorkflowStepInput.ParallelStepInput | IfElseWorkflowStepInput.ThenInput;
        /**
         * The steps to run if the condition is false
         */
        else?: IfElseWorkflowStepInput.WaitForInputStep | IfElseWorkflowStepInput.EvaluateStep | IfElseWorkflowStepInput.ToolCallStep | IfElseWorkflowStepInput.PromptStepInput | IfElseWorkflowStepInput.GetStep | IfElseWorkflowStepInput.SetStep | IfElseWorkflowStepInput.LogStep | IfElseWorkflowStepInput.YieldStep | IfElseWorkflowStepInput.ReturnStep | IfElseWorkflowStepInput.SleepStep | IfElseWorkflowStepInput.ErrorWorkflowStep | unknown | IfElseWorkflowStepInput.SwitchStepInput | IfElseWorkflowStepInput.ForeachStepInput | IfElseWorkflowStepInput.ParallelStepInput | IfElseWorkflowStepInput.ElseInput | null;
        label?: string | null;
    }
    namespace IfElseWorkflowStepInput {
        interface WaitForInputStep {
            wait_for_input: WaitForInputStep.WaitForInput;
            label?: string | null;
        }
        namespace WaitForInputStep {
            interface WaitForInput {
                info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            }
        }
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
        interface ReturnStep {
            return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            label?: string | null;
        }
        interface SleepStep {
            sleep: SleepStep.Sleep;
            label?: string | null;
        }
        namespace SleepStep {
            interface Sleep {
                days?: number;
                hours?: number;
                minutes?: number;
                seconds?: number;
            }
        }
        interface ErrorWorkflowStep {
            error: string;
            label?: string | null;
        }
        interface SwitchStepInput {
            switch: Array<SwitchStepInput.Switch>;
            label?: string | null;
        }
        namespace SwitchStepInput {
            interface Switch {
                case: '_';
                then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepInput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
            }
            namespace Switch {
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
                interface ReturnStep {
                    return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    label?: string | null;
                }
                interface SleepStep {
                    sleep: SleepStep.Sleep;
                    label?: string | null;
                }
                namespace SleepStep {
                    interface Sleep {
                        days?: number;
                        hours?: number;
                        minutes?: number;
                        seconds?: number;
                    }
                }
                interface ErrorWorkflowStep {
                    error: string;
                    label?: string | null;
                }
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
            }
        }
        interface ForeachStepInput {
            foreach: ForeachStepInput.Foreach;
            label?: string | null;
        }
        namespace ForeachStepInput {
            interface Foreach {
                do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepInput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
                in: string;
            }
            namespace Foreach {
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
            }
        }
        interface ParallelStepInput {
            parallel: Array<ParallelStepInput.EvaluateStep | ParallelStepInput.ToolCallStep | ParallelStepInput.PromptStepInput | ParallelStepInput.GetStep | ParallelStepInput.SetStep | ParallelStepInput.LogStep | ParallelStepInput.YieldStep>;
            label?: string | null;
        }
        namespace ParallelStepInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
        /**
         * The steps to run if the condition is true
         */
        interface ThenInput {
            map: ThenInput.EvaluateStep | ThenInput.ToolCallStep | ThenInput.PromptStepInput | ThenInput.GetStep | ThenInput.SetStep | ThenInput.LogStep | ThenInput.YieldStep;
            over: string;
            initial?: unknown;
            label?: string | null;
            parallelism?: number | null;
            reduce?: string | null;
        }
        namespace ThenInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
        interface WaitForInputStep {
            wait_for_input: WaitForInputStep.WaitForInput;
            label?: string | null;
        }
        namespace WaitForInputStep {
            interface WaitForInput {
                info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            }
        }
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
        interface ReturnStep {
            return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
            label?: string | null;
        }
        interface SleepStep {
            sleep: SleepStep.Sleep;
            label?: string | null;
        }
        namespace SleepStep {
            interface Sleep {
                days?: number;
                hours?: number;
                minutes?: number;
                seconds?: number;
            }
        }
        interface ErrorWorkflowStep {
            error: string;
            label?: string | null;
        }
        interface SwitchStepInput {
            switch: Array<SwitchStepInput.Switch>;
            label?: string | null;
        }
        namespace SwitchStepInput {
            interface Switch {
                case: '_';
                then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepInput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
            }
            namespace Switch {
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
                interface ReturnStep {
                    return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    label?: string | null;
                }
                interface SleepStep {
                    sleep: SleepStep.Sleep;
                    label?: string | null;
                }
                namespace SleepStep {
                    interface Sleep {
                        days?: number;
                        hours?: number;
                        minutes?: number;
                        seconds?: number;
                    }
                }
                interface ErrorWorkflowStep {
                    error: string;
                    label?: string | null;
                }
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
            }
        }
        interface ForeachStepInput {
            foreach: ForeachStepInput.Foreach;
            label?: string | null;
        }
        namespace ForeachStepInput {
            interface Foreach {
                do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepInput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
                in: string;
            }
            namespace Foreach {
                interface WaitForInputStep {
                    wait_for_input: WaitForInputStep.WaitForInput;
                    label?: string | null;
                }
                namespace WaitForInputStep {
                    interface WaitForInput {
                        info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                    }
                }
                interface EvaluateStep {
                    evaluate: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface ToolCallStep {
                    tool: string;
                    arguments?: unknown | '_';
                    label?: string | null;
                }
                interface PromptStepInput {
                    prompt: Array<PromptStepInput.UnionMember0> | string;
                    auto_run_tools?: boolean;
                    disable_cache?: boolean;
                    label?: string | null;
                    settings?: unknown | null;
                    tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                    tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                    unwrap?: boolean;
                }
                namespace PromptStepInput {
                    interface UnionMember0 {
                        content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                        role: 'user' | 'assistant' | 'system' | 'tool';
                        continue?: boolean | null;
                        name?: string | null;
                        tool_call_id?: string | null;
                        tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                    }
                    namespace UnionMember0 {
                        interface Content {
                            text: string;
                            type?: 'text';
                        }
                        interface AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                            type?: 'image_url';
                        }
                        namespace AgentsAPIAutogenTasksContentModel {
                            /**
                             * The image URL
                             */
                            interface ImageURL {
                                url: string;
                                detail?: 'low' | 'high' | 'auto';
                            }
                        }
                        /**
                         * Anthropic image content part
                         */
                        interface ContentModel1Input {
                            content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                            tool_use_id: string;
                            type?: 'tool_result';
                        }
                        namespace ContentModel1Input {
                            interface UnionMember0 {
                                text: string;
                                type?: 'text';
                            }
                            interface UnionMember1 {
                                source: UnionMember1.Source;
                                type?: 'image';
                            }
                            namespace UnionMember1 {
                                interface Source {
                                    data: string;
                                    media_type: string;
                                    type?: 'base64';
                                }
                            }
                        }
                        interface ChosenFunctionCall {
                            function: ChosenFunctionCall.Function;
                            api_call?: unknown;
                            bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                            computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                            integration?: unknown;
                            system?: unknown;
                            text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                            type?: 'function';
                        }
                        namespace ChosenFunctionCall {
                            interface Function {
                                name: string;
                                arguments?: string | null;
                            }
                            interface Bash20241022 {
                                command?: string | null;
                                restart?: boolean;
                            }
                            interface Computer20241022 {
                                action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                                coordinate?: Array<number> | null;
                                text?: string | null;
                            }
                            interface TextEditor20241022 {
                                command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                                path: string;
                                file_text?: string | null;
                                insert_line?: number | null;
                                new_str?: string | null;
                                old_str?: string | null;
                                view_range?: Array<number> | null;
                            }
                        }
                        interface ChosenComputer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface ChosenTextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                        interface ChosenBash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                    }
                    interface NamedToolChoice {
                        function?: NamedToolChoice.Function | null;
                    }
                    namespace NamedToolChoice {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                    }
                    /**
                     * Reference to a tool
                     */
                    interface ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                    }
                    namespace ToolRef {
                        /**
                         * Reference to a tool by id
                         */
                        interface ToolRefByID {
                            id?: string | null;
                        }
                        /**
                         * Reference to a tool by name
                         */
                        interface ToolRefByName {
                            name?: string | null;
                        }
                    }
                    /**
                     * Payload for creating a tool
                     */
                    interface AgentsAPIAutogenToolsCreateToolRequestInput {
                        name: string;
                        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                        /**
                         * API call definition
                         */
                        api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                        bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                        /**
                         * Anthropic new tools
                         */
                        computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                        description?: string | null;
                        /**
                         * Function definition
                         */
                        function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                        /**
                         * Brave integration definition
                         */
                        integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                        /**
                         * System definition
                         */
                        system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                        text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                    }
                    namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                        /**
                         * API call definition
                         */
                        interface APICall {
                            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                            url: string;
                            content?: string | null;
                            cookies?: Record<string, string> | null;
                            data?: unknown | null;
                            files?: unknown | null;
                            follow_redirects?: boolean | null;
                            headers?: Record<string, string> | null;
                            json?: unknown | null;
                            params?: string | unknown | null;
                            schema?: unknown | null;
                            timeout?: number | null;
                        }
                        interface Bash20241022 {
                            name?: string;
                            type?: 'bash_20241022';
                        }
                        /**
                         * Anthropic new tools
                         */
                        interface Computer20241022 {
                            display_height_px?: number;
                            display_number?: number;
                            display_width_px?: number;
                            name?: string;
                            type?: 'computer_20241022';
                        }
                        /**
                         * Function definition
                         */
                        interface Function {
                            description?: unknown;
                            name?: unknown;
                            parameters?: unknown | null;
                        }
                        interface DummyIntegrationDef {
                            arguments?: unknown;
                            method?: string | null;
                            provider?: 'dummy';
                            setup?: unknown;
                        }
                        /**
                         * Brave integration definition
                         */
                        interface BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            arguments?: BraveIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'brave';
                            /**
                             * Integration definition for Brave Search
                             */
                            setup?: BraveIntegrationDef.Setup | null;
                        }
                        namespace BraveIntegrationDef {
                            /**
                             * Arguments for Brave Search
                             */
                            interface Arguments {
                                query: string;
                            }
                            /**
                             * Integration definition for Brave Search
                             */
                            interface Setup {
                                brave_api_key: string;
                            }
                        }
                        /**
                         * Email integration definition
                         */
                        interface EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            arguments?: EmailIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'email';
                            /**
                             * Setup parameters for Email integration
                             */
                            setup?: EmailIntegrationDef.Setup | null;
                        }
                        namespace EmailIntegrationDef {
                            /**
                             * Arguments for Email sending
                             */
                            interface Arguments {
                                body: string;
                                from: string;
                                subject: string;
                                to: string;
                            }
                            /**
                             * Setup parameters for Email integration
                             */
                            interface Setup {
                                host: string;
                                password: string;
                                port: number;
                                user: string;
                            }
                        }
                        /**
                         * Spider integration definition
                         */
                        interface SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            arguments?: SpiderIntegrationDef.Arguments | null;
                            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                            provider?: 'spider';
                            /**
                             * Setup parameters for Spider integration
                             */
                            setup?: SpiderIntegrationDef.Setup | null;
                        }
                        namespace SpiderIntegrationDef {
                            /**
                             * Arguments for Spider integration
                             */
                            interface Arguments {
                                url: string;
                                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Spider integration
                             */
                            interface Setup {
                                spider_api_key: string;
                            }
                        }
                        /**
                         * Wikipedia integration definition
                         */
                        interface WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            arguments?: WikipediaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'wikipedia';
                            setup?: unknown;
                        }
                        namespace WikipediaIntegrationDef {
                            /**
                             * Arguments for Wikipedia Search
                             */
                            interface Arguments {
                                query: string;
                                load_max_docs?: number;
                            }
                        }
                        /**
                         * Weather integration definition
                         */
                        interface WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            arguments?: WeatherIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'weather';
                            /**
                             * Integration definition for Weather
                             */
                            setup?: WeatherIntegrationDef.Setup | null;
                        }
                        namespace WeatherIntegrationDef {
                            /**
                             * Arguments for Weather
                             */
                            interface Arguments {
                                location: string;
                            }
                            /**
                             * Integration definition for Weather
                             */
                            interface Setup {
                                openweathermap_api_key: string;
                            }
                        }
                        /**
                         * browserbase context provider
                         */
                        interface BrowserbaseContextIntegrationDef {
                            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                            method?: 'create_context';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseContextIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseContextIntegrationDef {
                            interface Arguments {
                                projectId: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase extension provider
                         */
                        interface BrowserbaseExtensionIntegrationDef {
                            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                            method?: 'install_extension_from_github' | null;
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseExtensionIntegrationDef {
                            interface Arguments {
                                repositoryName: string;
                                ref?: string | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase list sessions integration definition
                         */
                        interface BrowserbaseListSessionsIntegrationDef {
                            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                            method?: 'list_sessions';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseListSessionsIntegrationDef {
                            interface Arguments {
                                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase create session integration definition
                         */
                        interface BrowserbaseCreateSessionIntegrationDef {
                            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                            method?: 'create_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCreateSessionIntegrationDef {
                            interface Arguments {
                                browserSettings?: unknown;
                                extensionId?: string | null;
                                keepAlive?: boolean;
                                projectId?: string | null;
                                proxies?: boolean | Array<unknown>;
                                timeout?: number;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session integration definition
                         */
                        interface BrowserbaseGetSessionIntegrationDef {
                            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                            method?: 'get_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase complete session integration definition
                         */
                        interface BrowserbaseCompleteSessionIntegrationDef {
                            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                            method?: 'complete_session';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseCompleteSessionIntegrationDef {
                            interface Arguments {
                                id: string;
                                status?: 'REQUEST_RELEASE';
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * browserbase get session live urls integration definition
                         */
                        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                            method?: 'get_live_urls';
                            provider?: 'browserbase';
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                        }
                        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                            interface Arguments {
                                id: string;
                            }
                            /**
                             * The setup parameters for the browserbase integration
                             */
                            interface Setup {
                                api_key: string;
                                project_id: string;
                                api_url?: string | null;
                                connect_url?: string | null;
                            }
                        }
                        /**
                         * The integration definition for the remote browser
                         */
                        interface RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            setup: RemoteBrowserIntegrationDef.Setup;
                            /**
                             * The arguments for the remote browser
                             */
                            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                            method?: 'perform_action';
                            provider?: 'remote_browser';
                        }
                        namespace RemoteBrowserIntegrationDef {
                            /**
                             * The setup parameters for the remote browser
                             */
                            interface Setup {
                                connect_url?: string | null;
                                height?: number | null;
                                width?: number | null;
                            }
                            /**
                             * The arguments for the remote browser
                             */
                            interface Arguments {
                                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                                connect_url?: string | null;
                                coordinate?: Array<unknown> | null;
                                text?: string | null;
                            }
                        }
                        /**
                         * LlamaParse integration definition
                         */
                        interface LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            arguments?: LlamaParseIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'llama_parse';
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            setup?: LlamaParseIntegrationDef.Setup | null;
                        }
                        namespace LlamaParseIntegrationDef {
                            /**
                             * Arguments for LlamaParse integration
                             */
                            interface Arguments {
                                file: string | Array<string>;
                                base64?: boolean;
                                filename?: string | null;
                                params?: unknown | null;
                            }
                            /**
                             * Setup parameters for LlamaParse integration
                             */
                            interface Setup {
                                llamaparse_api_key: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Ffmpeg integration definition
                         */
                        interface FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            arguments?: FfmpegIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'ffmpeg';
                            setup?: unknown;
                        }
                        namespace FfmpegIntegrationDef {
                            /**
                             * Arguments for Ffmpeg CMD
                             */
                            interface Arguments {
                                cmd: string;
                                file?: string | Array<string> | null;
                            }
                        }
                        /**
                         * Cloudinary upload integration definition
                         */
                        interface CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                            method?: 'media_upload';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryUploadIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryUploadIntegrationDef {
                            /**
                             * Arguments for Cloudinary media upload
                             */
                            interface Arguments {
                                file: string;
                                public_id?: string | null;
                                return_base64?: boolean;
                                upload_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Cloudinary edit integration definition
                         */
                        interface CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                            method?: 'media_edit';
                            provider?: 'cloudinary';
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            setup?: CloudinaryEditIntegrationDef.Setup | null;
                        }
                        namespace CloudinaryEditIntegrationDef {
                            /**
                             * Arguments for Cloudinary media edit
                             */
                            interface Arguments {
                                public_id: string;
                                transformation: Array<unknown>;
                                return_base64?: boolean;
                            }
                            /**
                             * Setup parameters for Cloudinary integration
                             */
                            interface Setup {
                                cloudinary_api_key: string;
                                cloudinary_api_secret: string;
                                cloudinary_cloud_name: string;
                                params?: unknown | null;
                            }
                        }
                        /**
                         * Arxiv integration definition
                         */
                        interface ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            arguments?: ArxivIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'arxiv';
                            setup?: unknown;
                        }
                        namespace ArxivIntegrationDef {
                            /**
                             * Arguments for Arxiv Search
                             */
                            interface Arguments {
                                query: string;
                                download_pdf?: boolean;
                                id_list?: Array<string> | null;
                                max_results?: number;
                                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                                sort_order?: 'ascending' | 'descending';
                            }
                        }
                        /**
                         * Unstructured integration definition
                         */
                        interface UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            arguments?: UnstructuredIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'unstructured';
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            setup?: UnstructuredIntegrationDef.Setup | null;
                        }
                        namespace UnstructuredIntegrationDef {
                            /**
                             * Arguments for Unstructured partition integration
                             */
                            interface Arguments {
                                file: string;
                                filename?: string | null;
                                partition_params?: unknown | null;
                            }
                            /**
                             * Setup parameters for Unstructured integration
                             */
                            interface Setup {
                                unstructured_api_key: string;
                                retry_config?: unknown | null;
                                server?: string | null;
                                server_url?: string | null;
                                timeout_ms?: number | null;
                                url_params?: unknown | null;
                            }
                        }
                        /**
                         * Algolia integration definition
                         */
                        interface AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            arguments?: AlgoliaIntegrationDef.Arguments | null;
                            method?: string | null;
                            provider?: 'algolia';
                            /**
                             * Integration definition for Algolia
                             */
                            setup?: AlgoliaIntegrationDef.Setup | null;
                        }
                        namespace AlgoliaIntegrationDef {
                            /**
                             * Arguments for Algolia Search
                             */
                            interface Arguments {
                                index_name: string;
                                query: string;
                                attributes_to_retrieve?: Array<string> | null;
                                hits_per_page?: number;
                            }
                            /**
                             * Integration definition for Algolia
                             */
                            interface Setup {
                                algolia_api_key: string;
                                algolia_application_id: string;
                            }
                        }
                        /**
                         * System definition
                         */
                        interface System {
                            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                            arguments?: unknown | null;
                            resource_id?: string | null;
                            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                        }
                        interface TextEditor20241022 {
                            name?: string;
                            type?: 'text_editor_20241022';
                        }
                    }
                }
                interface GetStep {
                    get: string;
                    label?: string | null;
                }
                interface SetStep {
                    set: Record<string, unknown | string>;
                    label?: string | null;
                }
                interface LogStep {
                    log: string;
                    label?: string | null;
                }
                interface YieldStep {
                    workflow: string;
                    arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                    label?: string | null;
                }
            }
        }
        interface ParallelStepInput {
            parallel: Array<ParallelStepInput.EvaluateStep | ParallelStepInput.ToolCallStep | ParallelStepInput.PromptStepInput | ParallelStepInput.GetStep | ParallelStepInput.SetStep | ParallelStepInput.LogStep | ParallelStepInput.YieldStep>;
            label?: string | null;
        }
        namespace ParallelStepInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
        /**
         * The steps to run if the condition is false
         */
        interface ElseInput {
            map: ElseInput.EvaluateStep | ElseInput.ToolCallStep | ElseInput.PromptStepInput | ElseInput.GetStep | ElseInput.SetStep | ElseInput.LogStep | ElseInput.YieldStep;
            over: string;
            initial?: unknown;
            label?: string | null;
            parallelism?: number | null;
            reduce?: string | null;
        }
        namespace ElseInput {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
    }
    interface SwitchStepInput {
        switch: Array<SwitchStepInput.Switch>;
        label?: string | null;
    }
    namespace SwitchStepInput {
        interface Switch {
            case: '_';
            then: Switch.EvaluateStep | Switch.ToolCallStep | Switch.PromptStepInput | Switch.GetStep | Switch.SetStep | Switch.LogStep | Switch.YieldStep | Switch.ReturnStep | Switch.SleepStep | Switch.ErrorWorkflowStep | Switch.WaitForInputStep;
        }
        namespace Switch {
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
            interface ReturnStep {
                return: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                label?: string | null;
            }
            interface SleepStep {
                sleep: SleepStep.Sleep;
                label?: string | null;
            }
            namespace SleepStep {
                interface Sleep {
                    days?: number;
                    hours?: number;
                    minutes?: number;
                    seconds?: number;
                }
            }
            interface ErrorWorkflowStep {
                error: string;
                label?: string | null;
            }
            interface WaitForInputStep {
                wait_for_input: WaitForInputStep.WaitForInput;
                label?: string | null;
            }
            namespace WaitForInputStep {
                interface WaitForInput {
                    info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                }
            }
        }
    }
    interface ForeachStepInput {
        foreach: ForeachStepInput.Foreach;
        label?: string | null;
    }
    namespace ForeachStepInput {
        interface Foreach {
            do: Foreach.WaitForInputStep | Foreach.EvaluateStep | Foreach.ToolCallStep | Foreach.PromptStepInput | Foreach.GetStep | Foreach.SetStep | Foreach.LogStep | Foreach.YieldStep;
            in: string;
        }
        namespace Foreach {
            interface WaitForInputStep {
                wait_for_input: WaitForInputStep.WaitForInput;
                label?: string | null;
            }
            namespace WaitForInputStep {
                interface WaitForInput {
                    info: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string>;
                }
            }
            interface EvaluateStep {
                evaluate: Record<string, unknown | string>;
                label?: string | null;
            }
            interface ToolCallStep {
                tool: string;
                arguments?: unknown | '_';
                label?: string | null;
            }
            interface PromptStepInput {
                prompt: Array<PromptStepInput.UnionMember0> | string;
                auto_run_tools?: boolean;
                disable_cache?: boolean;
                label?: string | null;
                settings?: unknown | null;
                tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
                tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
                unwrap?: boolean;
            }
            namespace PromptStepInput {
                interface UnionMember0 {
                    content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                    role: 'user' | 'assistant' | 'system' | 'tool';
                    continue?: boolean | null;
                    name?: string | null;
                    tool_call_id?: string | null;
                    tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
                }
                namespace UnionMember0 {
                    interface Content {
                        text: string;
                        type?: 'text';
                    }
                    interface AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                        type?: 'image_url';
                    }
                    namespace AgentsAPIAutogenTasksContentModel {
                        /**
                         * The image URL
                         */
                        interface ImageURL {
                            url: string;
                            detail?: 'low' | 'high' | 'auto';
                        }
                    }
                    /**
                     * Anthropic image content part
                     */
                    interface ContentModel1Input {
                        content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                        tool_use_id: string;
                        type?: 'tool_result';
                    }
                    namespace ContentModel1Input {
                        interface UnionMember0 {
                            text: string;
                            type?: 'text';
                        }
                        interface UnionMember1 {
                            source: UnionMember1.Source;
                            type?: 'image';
                        }
                        namespace UnionMember1 {
                            interface Source {
                                data: string;
                                media_type: string;
                                type?: 'base64';
                            }
                        }
                    }
                    interface ChosenFunctionCall {
                        function: ChosenFunctionCall.Function;
                        api_call?: unknown;
                        bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                        computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                        integration?: unknown;
                        system?: unknown;
                        text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                        type?: 'function';
                    }
                    namespace ChosenFunctionCall {
                        interface Function {
                            name: string;
                            arguments?: string | null;
                        }
                        interface Bash20241022 {
                            command?: string | null;
                            restart?: boolean;
                        }
                        interface Computer20241022 {
                            action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                            coordinate?: Array<number> | null;
                            text?: string | null;
                        }
                        interface TextEditor20241022 {
                            command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                            path: string;
                            file_text?: string | null;
                            insert_line?: number | null;
                            new_str?: string | null;
                            old_str?: string | null;
                            view_range?: Array<number> | null;
                        }
                    }
                    interface ChosenComputer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface ChosenTextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                    interface ChosenBash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                }
                interface NamedToolChoice {
                    function?: NamedToolChoice.Function | null;
                }
                namespace NamedToolChoice {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                }
                /**
                 * Reference to a tool
                 */
                interface ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
                }
                namespace ToolRef {
                    /**
                     * Reference to a tool by id
                     */
                    interface ToolRefByID {
                        id?: string | null;
                    }
                    /**
                     * Reference to a tool by name
                     */
                    interface ToolRefByName {
                        name?: string | null;
                    }
                }
                /**
                 * Payload for creating a tool
                 */
                interface AgentsAPIAutogenToolsCreateToolRequestInput {
                    name: string;
                    type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                    /**
                     * API call definition
                     */
                    api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                    bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                    /**
                     * Anthropic new tools
                     */
                    computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                    description?: string | null;
                    /**
                     * Function definition
                     */
                    function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                    /**
                     * Brave integration definition
                     */
                    integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                    /**
                     * System definition
                     */
                    system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                    text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
                }
                namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                    /**
                     * API call definition
                     */
                    interface APICall {
                        method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                        url: string;
                        content?: string | null;
                        cookies?: Record<string, string> | null;
                        data?: unknown | null;
                        files?: unknown | null;
                        follow_redirects?: boolean | null;
                        headers?: Record<string, string> | null;
                        json?: unknown | null;
                        params?: string | unknown | null;
                        schema?: unknown | null;
                        timeout?: number | null;
                    }
                    interface Bash20241022 {
                        name?: string;
                        type?: 'bash_20241022';
                    }
                    /**
                     * Anthropic new tools
                     */
                    interface Computer20241022 {
                        display_height_px?: number;
                        display_number?: number;
                        display_width_px?: number;
                        name?: string;
                        type?: 'computer_20241022';
                    }
                    /**
                     * Function definition
                     */
                    interface Function {
                        description?: unknown;
                        name?: unknown;
                        parameters?: unknown | null;
                    }
                    interface DummyIntegrationDef {
                        arguments?: unknown;
                        method?: string | null;
                        provider?: 'dummy';
                        setup?: unknown;
                    }
                    /**
                     * Brave integration definition
                     */
                    interface BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        arguments?: BraveIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'brave';
                        /**
                         * Integration definition for Brave Search
                         */
                        setup?: BraveIntegrationDef.Setup | null;
                    }
                    namespace BraveIntegrationDef {
                        /**
                         * Arguments for Brave Search
                         */
                        interface Arguments {
                            query: string;
                        }
                        /**
                         * Integration definition for Brave Search
                         */
                        interface Setup {
                            brave_api_key: string;
                        }
                    }
                    /**
                     * Email integration definition
                     */
                    interface EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        arguments?: EmailIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'email';
                        /**
                         * Setup parameters for Email integration
                         */
                        setup?: EmailIntegrationDef.Setup | null;
                    }
                    namespace EmailIntegrationDef {
                        /**
                         * Arguments for Email sending
                         */
                        interface Arguments {
                            body: string;
                            from: string;
                            subject: string;
                            to: string;
                        }
                        /**
                         * Setup parameters for Email integration
                         */
                        interface Setup {
                            host: string;
                            password: string;
                            port: number;
                            user: string;
                        }
                    }
                    /**
                     * Spider integration definition
                     */
                    interface SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        arguments?: SpiderIntegrationDef.Arguments | null;
                        method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                        provider?: 'spider';
                        /**
                         * Setup parameters for Spider integration
                         */
                        setup?: SpiderIntegrationDef.Setup | null;
                    }
                    namespace SpiderIntegrationDef {
                        /**
                         * Arguments for Spider integration
                         */
                        interface Arguments {
                            url: string;
                            content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Spider integration
                         */
                        interface Setup {
                            spider_api_key: string;
                        }
                    }
                    /**
                     * Wikipedia integration definition
                     */
                    interface WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        arguments?: WikipediaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'wikipedia';
                        setup?: unknown;
                    }
                    namespace WikipediaIntegrationDef {
                        /**
                         * Arguments for Wikipedia Search
                         */
                        interface Arguments {
                            query: string;
                            load_max_docs?: number;
                        }
                    }
                    /**
                     * Weather integration definition
                     */
                    interface WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        arguments?: WeatherIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'weather';
                        /**
                         * Integration definition for Weather
                         */
                        setup?: WeatherIntegrationDef.Setup | null;
                    }
                    namespace WeatherIntegrationDef {
                        /**
                         * Arguments for Weather
                         */
                        interface Arguments {
                            location: string;
                        }
                        /**
                         * Integration definition for Weather
                         */
                        interface Setup {
                            openweathermap_api_key: string;
                        }
                    }
                    /**
                     * browserbase context provider
                     */
                    interface BrowserbaseContextIntegrationDef {
                        arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                        method?: 'create_context';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseContextIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseContextIntegrationDef {
                        interface Arguments {
                            projectId: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase extension provider
                     */
                    interface BrowserbaseExtensionIntegrationDef {
                        arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                        method?: 'install_extension_from_github' | null;
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseExtensionIntegrationDef {
                        interface Arguments {
                            repositoryName: string;
                            ref?: string | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase list sessions integration definition
                     */
                    interface BrowserbaseListSessionsIntegrationDef {
                        arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                        method?: 'list_sessions';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseListSessionsIntegrationDef {
                        interface Arguments {
                            status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase create session integration definition
                     */
                    interface BrowserbaseCreateSessionIntegrationDef {
                        arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                        method?: 'create_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCreateSessionIntegrationDef {
                        interface Arguments {
                            browserSettings?: unknown;
                            extensionId?: string | null;
                            keepAlive?: boolean;
                            projectId?: string | null;
                            proxies?: boolean | Array<unknown>;
                            timeout?: number;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session integration definition
                     */
                    interface BrowserbaseGetSessionIntegrationDef {
                        arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                        method?: 'get_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase complete session integration definition
                     */
                    interface BrowserbaseCompleteSessionIntegrationDef {
                        arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                        method?: 'complete_session';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseCompleteSessionIntegrationDef {
                        interface Arguments {
                            id: string;
                            status?: 'REQUEST_RELEASE';
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * browserbase get session live urls integration definition
                     */
                    interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                        arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                        method?: 'get_live_urls';
                        provider?: 'browserbase';
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                    }
                    namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                        interface Arguments {
                            id: string;
                        }
                        /**
                         * The setup parameters for the browserbase integration
                         */
                        interface Setup {
                            api_key: string;
                            project_id: string;
                            api_url?: string | null;
                            connect_url?: string | null;
                        }
                    }
                    /**
                     * The integration definition for the remote browser
                     */
                    interface RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        setup: RemoteBrowserIntegrationDef.Setup;
                        /**
                         * The arguments for the remote browser
                         */
                        arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                        method?: 'perform_action';
                        provider?: 'remote_browser';
                    }
                    namespace RemoteBrowserIntegrationDef {
                        /**
                         * The setup parameters for the remote browser
                         */
                        interface Setup {
                            connect_url?: string | null;
                            height?: number | null;
                            width?: number | null;
                        }
                        /**
                         * The arguments for the remote browser
                         */
                        interface Arguments {
                            action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                            connect_url?: string | null;
                            coordinate?: Array<unknown> | null;
                            text?: string | null;
                        }
                    }
                    /**
                     * LlamaParse integration definition
                     */
                    interface LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        arguments?: LlamaParseIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'llama_parse';
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        setup?: LlamaParseIntegrationDef.Setup | null;
                    }
                    namespace LlamaParseIntegrationDef {
                        /**
                         * Arguments for LlamaParse integration
                         */
                        interface Arguments {
                            file: string | Array<string>;
                            base64?: boolean;
                            filename?: string | null;
                            params?: unknown | null;
                        }
                        /**
                         * Setup parameters for LlamaParse integration
                         */
                        interface Setup {
                            llamaparse_api_key: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Ffmpeg integration definition
                     */
                    interface FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        arguments?: FfmpegIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'ffmpeg';
                        setup?: unknown;
                    }
                    namespace FfmpegIntegrationDef {
                        /**
                         * Arguments for Ffmpeg CMD
                         */
                        interface Arguments {
                            cmd: string;
                            file?: string | Array<string> | null;
                        }
                    }
                    /**
                     * Cloudinary upload integration definition
                     */
                    interface CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                        method?: 'media_upload';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryUploadIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryUploadIntegrationDef {
                        /**
                         * Arguments for Cloudinary media upload
                         */
                        interface Arguments {
                            file: string;
                            public_id?: string | null;
                            return_base64?: boolean;
                            upload_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Cloudinary edit integration definition
                     */
                    interface CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                        method?: 'media_edit';
                        provider?: 'cloudinary';
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        setup?: CloudinaryEditIntegrationDef.Setup | null;
                    }
                    namespace CloudinaryEditIntegrationDef {
                        /**
                         * Arguments for Cloudinary media edit
                         */
                        interface Arguments {
                            public_id: string;
                            transformation: Array<unknown>;
                            return_base64?: boolean;
                        }
                        /**
                         * Setup parameters for Cloudinary integration
                         */
                        interface Setup {
                            cloudinary_api_key: string;
                            cloudinary_api_secret: string;
                            cloudinary_cloud_name: string;
                            params?: unknown | null;
                        }
                    }
                    /**
                     * Arxiv integration definition
                     */
                    interface ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        arguments?: ArxivIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'arxiv';
                        setup?: unknown;
                    }
                    namespace ArxivIntegrationDef {
                        /**
                         * Arguments for Arxiv Search
                         */
                        interface Arguments {
                            query: string;
                            download_pdf?: boolean;
                            id_list?: Array<string> | null;
                            max_results?: number;
                            sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                            sort_order?: 'ascending' | 'descending';
                        }
                    }
                    /**
                     * Unstructured integration definition
                     */
                    interface UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        arguments?: UnstructuredIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'unstructured';
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        setup?: UnstructuredIntegrationDef.Setup | null;
                    }
                    namespace UnstructuredIntegrationDef {
                        /**
                         * Arguments for Unstructured partition integration
                         */
                        interface Arguments {
                            file: string;
                            filename?: string | null;
                            partition_params?: unknown | null;
                        }
                        /**
                         * Setup parameters for Unstructured integration
                         */
                        interface Setup {
                            unstructured_api_key: string;
                            retry_config?: unknown | null;
                            server?: string | null;
                            server_url?: string | null;
                            timeout_ms?: number | null;
                            url_params?: unknown | null;
                        }
                    }
                    /**
                     * Algolia integration definition
                     */
                    interface AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        arguments?: AlgoliaIntegrationDef.Arguments | null;
                        method?: string | null;
                        provider?: 'algolia';
                        /**
                         * Integration definition for Algolia
                         */
                        setup?: AlgoliaIntegrationDef.Setup | null;
                    }
                    namespace AlgoliaIntegrationDef {
                        /**
                         * Arguments for Algolia Search
                         */
                        interface Arguments {
                            index_name: string;
                            query: string;
                            attributes_to_retrieve?: Array<string> | null;
                            hits_per_page?: number;
                        }
                        /**
                         * Integration definition for Algolia
                         */
                        interface Setup {
                            algolia_api_key: string;
                            algolia_application_id: string;
                        }
                    }
                    /**
                     * System definition
                     */
                    interface System {
                        operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                        resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                        arguments?: unknown | null;
                        resource_id?: string | null;
                        subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                    }
                    interface TextEditor20241022 {
                        name?: string;
                        type?: 'text_editor_20241022';
                    }
                }
            }
            interface GetStep {
                get: string;
                label?: string | null;
            }
            interface SetStep {
                set: Record<string, unknown | string>;
                label?: string | null;
            }
            interface LogStep {
                log: string;
                label?: string | null;
            }
            interface YieldStep {
                workflow: string;
                arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
                label?: string | null;
            }
        }
    }
    interface ParallelStepInput {
        parallel: Array<ParallelStepInput.EvaluateStep | ParallelStepInput.ToolCallStep | ParallelStepInput.PromptStepInput | ParallelStepInput.GetStep | ParallelStepInput.SetStep | ParallelStepInput.LogStep | ParallelStepInput.YieldStep>;
        label?: string | null;
    }
    namespace ParallelStepInput {
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
    }
    interface MainInput {
        map: MainInput.EvaluateStep | MainInput.ToolCallStep | MainInput.PromptStepInput | MainInput.GetStep | MainInput.SetStep | MainInput.LogStep | MainInput.YieldStep;
        over: string;
        initial?: unknown;
        label?: string | null;
        parallelism?: number | null;
        reduce?: string | null;
    }
    namespace MainInput {
        interface EvaluateStep {
            evaluate: Record<string, unknown | string>;
            label?: string | null;
        }
        interface ToolCallStep {
            tool: string;
            arguments?: unknown | '_';
            label?: string | null;
        }
        interface PromptStepInput {
            prompt: Array<PromptStepInput.UnionMember0> | string;
            auto_run_tools?: boolean;
            disable_cache?: boolean;
            label?: string | null;
            settings?: unknown | null;
            tool_choice?: 'auto' | 'none' | PromptStepInput.NamedToolChoice | null;
            tools?: 'all' | Array<PromptStepInput.ToolRef | PromptStepInput.AgentsAPIAutogenToolsCreateToolRequestInput>;
            unwrap?: boolean;
        }
        namespace PromptStepInput {
            interface UnionMember0 {
                content: Array<string> | Array<UnionMember0.Content | UnionMember0.AgentsAPIAutogenTasksContentModel | UnionMember0.ContentModel1Input> | string | null;
                role: 'user' | 'assistant' | 'system' | 'tool';
                continue?: boolean | null;
                name?: string | null;
                tool_call_id?: string | null;
                tool_calls?: Array<UnionMember0.ChosenFunctionCall | UnionMember0.ChosenComputer20241022 | UnionMember0.ChosenTextEditor20241022 | UnionMember0.ChosenBash20241022> | null;
            }
            namespace UnionMember0 {
                interface Content {
                    text: string;
                    type?: 'text';
                }
                interface AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    image_url: AgentsAPIAutogenTasksContentModel.ImageURL;
                    type?: 'image_url';
                }
                namespace AgentsAPIAutogenTasksContentModel {
                    /**
                     * The image URL
                     */
                    interface ImageURL {
                        url: string;
                        detail?: 'low' | 'high' | 'auto';
                    }
                }
                /**
                 * Anthropic image content part
                 */
                interface ContentModel1Input {
                    content: Array<ContentModel1Input.UnionMember0> | Array<ContentModel1Input.UnionMember1>;
                    tool_use_id: string;
                    type?: 'tool_result';
                }
                namespace ContentModel1Input {
                    interface UnionMember0 {
                        text: string;
                        type?: 'text';
                    }
                    interface UnionMember1 {
                        source: UnionMember1.Source;
                        type?: 'image';
                    }
                    namespace UnionMember1 {
                        interface Source {
                            data: string;
                            media_type: string;
                            type?: 'base64';
                        }
                    }
                }
                interface ChosenFunctionCall {
                    function: ChosenFunctionCall.Function;
                    api_call?: unknown;
                    bash_20241022?: ChosenFunctionCall.Bash20241022 | null;
                    computer_20241022?: ChosenFunctionCall.Computer20241022 | null;
                    integration?: unknown;
                    system?: unknown;
                    text_editor_20241022?: ChosenFunctionCall.TextEditor20241022 | null;
                    type?: 'function';
                }
                namespace ChosenFunctionCall {
                    interface Function {
                        name: string;
                        arguments?: string | null;
                    }
                    interface Bash20241022 {
                        command?: string | null;
                        restart?: boolean;
                    }
                    interface Computer20241022 {
                        action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                        coordinate?: Array<number> | null;
                        text?: string | null;
                    }
                    interface TextEditor20241022 {
                        command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                        path: string;
                        file_text?: string | null;
                        insert_line?: number | null;
                        new_str?: string | null;
                        old_str?: string | null;
                        view_range?: Array<number> | null;
                    }
                }
                interface ChosenComputer20241022 {
                    action: 'key' | 'type' | 'cursor_position' | 'mouse_move' | 'left_click' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot';
                    coordinate?: Array<number> | null;
                    text?: string | null;
                }
                interface ChosenTextEditor20241022 {
                    command: 'str_replace' | 'insert' | 'view' | 'undo_edit';
                    path: string;
                    file_text?: string | null;
                    insert_line?: number | null;
                    new_str?: string | null;
                    old_str?: string | null;
                    view_range?: Array<number> | null;
                }
                interface ChosenBash20241022 {
                    command?: string | null;
                    restart?: boolean;
                }
            }
            interface NamedToolChoice {
                function?: NamedToolChoice.Function | null;
            }
            namespace NamedToolChoice {
                interface Function {
                    name: string;
                    arguments?: string | null;
                }
            }
            /**
             * Reference to a tool
             */
            interface ToolRef {
                /**
                 * Reference to a tool by id
                 */
                ref: ToolRef.ToolRefByID | ToolRef.ToolRefByName;
            }
            namespace ToolRef {
                /**
                 * Reference to a tool by id
                 */
                interface ToolRefByID {
                    id?: string | null;
                }
                /**
                 * Reference to a tool by name
                 */
                interface ToolRefByName {
                    name?: string | null;
                }
            }
            /**
             * Payload for creating a tool
             */
            interface AgentsAPIAutogenToolsCreateToolRequestInput {
                name: string;
                type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
                /**
                 * API call definition
                 */
                api_call?: AgentsAPIAutogenToolsCreateToolRequestInput.APICall | null;
                bash_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Bash20241022 | null;
                /**
                 * Anthropic new tools
                 */
                computer_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.Computer20241022 | null;
                description?: string | null;
                /**
                 * Function definition
                 */
                function?: AgentsAPIAutogenToolsCreateToolRequestInput.Function | null;
                /**
                 * Brave integration definition
                 */
                integration?: AgentsAPIAutogenToolsCreateToolRequestInput.DummyIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BraveIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.EmailIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.SpiderIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WikipediaIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.WeatherIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseContextIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseExtensionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseListSessionsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCreateSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseCompleteSessionIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.BrowserbaseGetSessionLiveURLsIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.RemoteBrowserIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.LlamaParseIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.FfmpegIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryUploadIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.CloudinaryEditIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.ArxivIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.UnstructuredIntegrationDef | AgentsAPIAutogenToolsCreateToolRequestInput.AlgoliaIntegrationDef | null;
                /**
                 * System definition
                 */
                system?: AgentsAPIAutogenToolsCreateToolRequestInput.System | null;
                text_editor_20241022?: AgentsAPIAutogenToolsCreateToolRequestInput.TextEditor20241022 | null;
            }
            namespace AgentsAPIAutogenToolsCreateToolRequestInput {
                /**
                 * API call definition
                 */
                interface APICall {
                    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
                    url: string;
                    content?: string | null;
                    cookies?: Record<string, string> | null;
                    data?: unknown | null;
                    files?: unknown | null;
                    follow_redirects?: boolean | null;
                    headers?: Record<string, string> | null;
                    json?: unknown | null;
                    params?: string | unknown | null;
                    schema?: unknown | null;
                    timeout?: number | null;
                }
                interface Bash20241022 {
                    name?: string;
                    type?: 'bash_20241022';
                }
                /**
                 * Anthropic new tools
                 */
                interface Computer20241022 {
                    display_height_px?: number;
                    display_number?: number;
                    display_width_px?: number;
                    name?: string;
                    type?: 'computer_20241022';
                }
                /**
                 * Function definition
                 */
                interface Function {
                    description?: unknown;
                    name?: unknown;
                    parameters?: unknown | null;
                }
                interface DummyIntegrationDef {
                    arguments?: unknown;
                    method?: string | null;
                    provider?: 'dummy';
                    setup?: unknown;
                }
                /**
                 * Brave integration definition
                 */
                interface BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    arguments?: BraveIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'brave';
                    /**
                     * Integration definition for Brave Search
                     */
                    setup?: BraveIntegrationDef.Setup | null;
                }
                namespace BraveIntegrationDef {
                    /**
                     * Arguments for Brave Search
                     */
                    interface Arguments {
                        query: string;
                    }
                    /**
                     * Integration definition for Brave Search
                     */
                    interface Setup {
                        brave_api_key: string;
                    }
                }
                /**
                 * Email integration definition
                 */
                interface EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    arguments?: EmailIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'email';
                    /**
                     * Setup parameters for Email integration
                     */
                    setup?: EmailIntegrationDef.Setup | null;
                }
                namespace EmailIntegrationDef {
                    /**
                     * Arguments for Email sending
                     */
                    interface Arguments {
                        body: string;
                        from: string;
                        subject: string;
                        to: string;
                    }
                    /**
                     * Setup parameters for Email integration
                     */
                    interface Setup {
                        host: string;
                        password: string;
                        port: number;
                        user: string;
                    }
                }
                /**
                 * Spider integration definition
                 */
                interface SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    arguments?: SpiderIntegrationDef.Arguments | null;
                    method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
                    provider?: 'spider';
                    /**
                     * Setup parameters for Spider integration
                     */
                    setup?: SpiderIntegrationDef.Setup | null;
                }
                namespace SpiderIntegrationDef {
                    /**
                     * Arguments for Spider integration
                     */
                    interface Arguments {
                        url: string;
                        content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Spider integration
                     */
                    interface Setup {
                        spider_api_key: string;
                    }
                }
                /**
                 * Wikipedia integration definition
                 */
                interface WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    arguments?: WikipediaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'wikipedia';
                    setup?: unknown;
                }
                namespace WikipediaIntegrationDef {
                    /**
                     * Arguments for Wikipedia Search
                     */
                    interface Arguments {
                        query: string;
                        load_max_docs?: number;
                    }
                }
                /**
                 * Weather integration definition
                 */
                interface WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    arguments?: WeatherIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'weather';
                    /**
                     * Integration definition for Weather
                     */
                    setup?: WeatherIntegrationDef.Setup | null;
                }
                namespace WeatherIntegrationDef {
                    /**
                     * Arguments for Weather
                     */
                    interface Arguments {
                        location: string;
                    }
                    /**
                     * Integration definition for Weather
                     */
                    interface Setup {
                        openweathermap_api_key: string;
                    }
                }
                /**
                 * browserbase context provider
                 */
                interface BrowserbaseContextIntegrationDef {
                    arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
                    method?: 'create_context';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseContextIntegrationDef.Setup | null;
                }
                namespace BrowserbaseContextIntegrationDef {
                    interface Arguments {
                        projectId: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase extension provider
                 */
                interface BrowserbaseExtensionIntegrationDef {
                    arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
                    method?: 'install_extension_from_github' | null;
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseExtensionIntegrationDef {
                    interface Arguments {
                        repositoryName: string;
                        ref?: string | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase list sessions integration definition
                 */
                interface BrowserbaseListSessionsIntegrationDef {
                    arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
                    method?: 'list_sessions';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseListSessionsIntegrationDef {
                    interface Arguments {
                        status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase create session integration definition
                 */
                interface BrowserbaseCreateSessionIntegrationDef {
                    arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
                    method?: 'create_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCreateSessionIntegrationDef {
                    interface Arguments {
                        browserSettings?: unknown;
                        extensionId?: string | null;
                        keepAlive?: boolean;
                        projectId?: string | null;
                        proxies?: boolean | Array<unknown>;
                        timeout?: number;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session integration definition
                 */
                interface BrowserbaseGetSessionIntegrationDef {
                    arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
                    method?: 'get_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase complete session integration definition
                 */
                interface BrowserbaseCompleteSessionIntegrationDef {
                    arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
                    method?: 'complete_session';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
                }
                namespace BrowserbaseCompleteSessionIntegrationDef {
                    interface Arguments {
                        id: string;
                        status?: 'REQUEST_RELEASE';
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * browserbase get session live urls integration definition
                 */
                interface BrowserbaseGetSessionLiveURLsIntegrationDef {
                    arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
                    method?: 'get_live_urls';
                    provider?: 'browserbase';
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
                }
                namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
                    interface Arguments {
                        id: string;
                    }
                    /**
                     * The setup parameters for the browserbase integration
                     */
                    interface Setup {
                        api_key: string;
                        project_id: string;
                        api_url?: string | null;
                        connect_url?: string | null;
                    }
                }
                /**
                 * The integration definition for the remote browser
                 */
                interface RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    setup: RemoteBrowserIntegrationDef.Setup;
                    /**
                     * The arguments for the remote browser
                     */
                    arguments?: RemoteBrowserIntegrationDef.Arguments | null;
                    method?: 'perform_action';
                    provider?: 'remote_browser';
                }
                namespace RemoteBrowserIntegrationDef {
                    /**
                     * The setup parameters for the remote browser
                     */
                    interface Setup {
                        connect_url?: string | null;
                        height?: number | null;
                        width?: number | null;
                    }
                    /**
                     * The arguments for the remote browser
                     */
                    interface Arguments {
                        action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                        connect_url?: string | null;
                        coordinate?: Array<unknown> | null;
                        text?: string | null;
                    }
                }
                /**
                 * LlamaParse integration definition
                 */
                interface LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    arguments?: LlamaParseIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'llama_parse';
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    setup?: LlamaParseIntegrationDef.Setup | null;
                }
                namespace LlamaParseIntegrationDef {
                    /**
                     * Arguments for LlamaParse integration
                     */
                    interface Arguments {
                        file: string | Array<string>;
                        base64?: boolean;
                        filename?: string | null;
                        params?: unknown | null;
                    }
                    /**
                     * Setup parameters for LlamaParse integration
                     */
                    interface Setup {
                        llamaparse_api_key: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Ffmpeg integration definition
                 */
                interface FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    arguments?: FfmpegIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'ffmpeg';
                    setup?: unknown;
                }
                namespace FfmpegIntegrationDef {
                    /**
                     * Arguments for Ffmpeg CMD
                     */
                    interface Arguments {
                        cmd: string;
                        file?: string | Array<string> | null;
                    }
                }
                /**
                 * Cloudinary upload integration definition
                 */
                interface CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
                    method?: 'media_upload';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryUploadIntegrationDef.Setup | null;
                }
                namespace CloudinaryUploadIntegrationDef {
                    /**
                     * Arguments for Cloudinary media upload
                     */
                    interface Arguments {
                        file: string;
                        public_id?: string | null;
                        return_base64?: boolean;
                        upload_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Cloudinary edit integration definition
                 */
                interface CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    arguments?: CloudinaryEditIntegrationDef.Arguments | null;
                    method?: 'media_edit';
                    provider?: 'cloudinary';
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    setup?: CloudinaryEditIntegrationDef.Setup | null;
                }
                namespace CloudinaryEditIntegrationDef {
                    /**
                     * Arguments for Cloudinary media edit
                     */
                    interface Arguments {
                        public_id: string;
                        transformation: Array<unknown>;
                        return_base64?: boolean;
                    }
                    /**
                     * Setup parameters for Cloudinary integration
                     */
                    interface Setup {
                        cloudinary_api_key: string;
                        cloudinary_api_secret: string;
                        cloudinary_cloud_name: string;
                        params?: unknown | null;
                    }
                }
                /**
                 * Arxiv integration definition
                 */
                interface ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    arguments?: ArxivIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'arxiv';
                    setup?: unknown;
                }
                namespace ArxivIntegrationDef {
                    /**
                     * Arguments for Arxiv Search
                     */
                    interface Arguments {
                        query: string;
                        download_pdf?: boolean;
                        id_list?: Array<string> | null;
                        max_results?: number;
                        sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                        sort_order?: 'ascending' | 'descending';
                    }
                }
                /**
                 * Unstructured integration definition
                 */
                interface UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    arguments?: UnstructuredIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'unstructured';
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    setup?: UnstructuredIntegrationDef.Setup | null;
                }
                namespace UnstructuredIntegrationDef {
                    /**
                     * Arguments for Unstructured partition integration
                     */
                    interface Arguments {
                        file: string;
                        filename?: string | null;
                        partition_params?: unknown | null;
                    }
                    /**
                     * Setup parameters for Unstructured integration
                     */
                    interface Setup {
                        unstructured_api_key: string;
                        retry_config?: unknown | null;
                        server?: string | null;
                        server_url?: string | null;
                        timeout_ms?: number | null;
                        url_params?: unknown | null;
                    }
                }
                /**
                 * Algolia integration definition
                 */
                interface AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    arguments?: AlgoliaIntegrationDef.Arguments | null;
                    method?: string | null;
                    provider?: 'algolia';
                    /**
                     * Integration definition for Algolia
                     */
                    setup?: AlgoliaIntegrationDef.Setup | null;
                }
                namespace AlgoliaIntegrationDef {
                    /**
                     * Arguments for Algolia Search
                     */
                    interface Arguments {
                        index_name: string;
                        query: string;
                        attributes_to_retrieve?: Array<string> | null;
                        hits_per_page?: number;
                    }
                    /**
                     * Integration definition for Algolia
                     */
                    interface Setup {
                        algolia_api_key: string;
                        algolia_application_id: string;
                    }
                }
                /**
                 * System definition
                 */
                interface System {
                    operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
                    resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
                    arguments?: unknown | null;
                    resource_id?: string | null;
                    subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
                }
                interface TextEditor20241022 {
                    name?: string;
                    type?: 'text_editor_20241022';
                }
            }
        }
        interface GetStep {
            get: string;
            label?: string | null;
        }
        interface SetStep {
            set: Record<string, unknown | string>;
            label?: string | null;
        }
        interface LogStep {
            log: string;
            label?: string | null;
        }
        interface YieldStep {
            workflow: string;
            arguments?: Record<string, Array<string> | Record<string, string> | Array<Record<string, string>> | string> | '_';
            label?: string | null;
        }
    }
    interface Tool {
        name: string;
        type: 'function' | 'integration' | 'system' | 'api_call' | 'computer_20241022' | 'text_editor_20241022' | 'bash_20241022';
        /**
         * API call definition
         */
        api_call?: Tool.APICall | null;
        bash_20241022?: Tool.Bash20241022 | null;
        /**
         * Anthropic new tools
         */
        computer_20241022?: Tool.Computer20241022 | null;
        description?: string | null;
        /**
         * Function definition
         */
        function?: Tool.Function | null;
        /**
         * Brave integration definition
         */
        integration?: Tool.DummyIntegrationDef | Tool.BraveIntegrationDef | Tool.EmailIntegrationDef | Tool.SpiderIntegrationDef | Tool.WikipediaIntegrationDef | Tool.WeatherIntegrationDef | Tool.BrowserbaseContextIntegrationDef | Tool.BrowserbaseExtensionIntegrationDef | Tool.BrowserbaseListSessionsIntegrationDef | Tool.BrowserbaseCreateSessionIntegrationDef | Tool.BrowserbaseGetSessionIntegrationDef | Tool.BrowserbaseCompleteSessionIntegrationDef | Tool.BrowserbaseGetSessionLiveURLsIntegrationDef | Tool.RemoteBrowserIntegrationDef | Tool.LlamaParseIntegrationDef | Tool.FfmpegIntegrationDef | Tool.CloudinaryUploadIntegrationDef | Tool.CloudinaryEditIntegrationDef | Tool.ArxivIntegrationDef | Tool.UnstructuredIntegrationDef | Tool.AlgoliaIntegrationDef | null;
        /**
         * System definition
         */
        system?: Tool.System | null;
        text_editor_20241022?: Tool.TextEditor20241022 | null;
    }
    namespace Tool {
        /**
         * API call definition
         */
        interface APICall {
            method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';
            url: string;
            content?: string | null;
            cookies?: Record<string, string> | null;
            data?: unknown | null;
            files?: unknown | null;
            follow_redirects?: boolean | null;
            headers?: Record<string, string> | null;
            json?: unknown | null;
            params?: string | unknown | null;
            schema?: unknown | null;
            timeout?: number | null;
        }
        interface Bash20241022 {
            name?: string;
            type?: 'bash_20241022';
        }
        /**
         * Anthropic new tools
         */
        interface Computer20241022 {
            display_height_px?: number;
            display_number?: number;
            display_width_px?: number;
            name?: string;
            type?: 'computer_20241022';
        }
        /**
         * Function definition
         */
        interface Function {
            description?: unknown;
            name?: unknown;
            parameters?: unknown | null;
        }
        interface DummyIntegrationDef {
            arguments?: unknown;
            method?: string | null;
            provider?: 'dummy';
            setup?: unknown;
        }
        /**
         * Brave integration definition
         */
        interface BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            arguments?: BraveIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'brave';
            /**
             * Integration definition for Brave Search
             */
            setup?: BraveIntegrationDef.Setup | null;
        }
        namespace BraveIntegrationDef {
            /**
             * Arguments for Brave Search
             */
            interface Arguments {
                query: string;
            }
            /**
             * Integration definition for Brave Search
             */
            interface Setup {
                brave_api_key: string;
            }
        }
        /**
         * Email integration definition
         */
        interface EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            arguments?: EmailIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'email';
            /**
             * Setup parameters for Email integration
             */
            setup?: EmailIntegrationDef.Setup | null;
        }
        namespace EmailIntegrationDef {
            /**
             * Arguments for Email sending
             */
            interface Arguments {
                body: string;
                from: string;
                subject: string;
                to: string;
            }
            /**
             * Setup parameters for Email integration
             */
            interface Setup {
                host: string;
                password: string;
                port: number;
                user: string;
            }
        }
        /**
         * Spider integration definition
         */
        interface SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            arguments?: SpiderIntegrationDef.Arguments | null;
            method?: 'crawl' | 'links' | 'screenshot' | 'search' | null;
            provider?: 'spider';
            /**
             * Setup parameters for Spider integration
             */
            setup?: SpiderIntegrationDef.Setup | null;
        }
        namespace SpiderIntegrationDef {
            /**
             * Arguments for Spider integration
             */
            interface Arguments {
                url: string;
                content_type?: 'application/json' | 'text/csv' | 'application/xml' | 'application/jsonl';
                params?: unknown | null;
            }
            /**
             * Setup parameters for Spider integration
             */
            interface Setup {
                spider_api_key: string;
            }
        }
        /**
         * Wikipedia integration definition
         */
        interface WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            arguments?: WikipediaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'wikipedia';
            setup?: unknown;
        }
        namespace WikipediaIntegrationDef {
            /**
             * Arguments for Wikipedia Search
             */
            interface Arguments {
                query: string;
                load_max_docs?: number;
            }
        }
        /**
         * Weather integration definition
         */
        interface WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            arguments?: WeatherIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'weather';
            /**
             * Integration definition for Weather
             */
            setup?: WeatherIntegrationDef.Setup | null;
        }
        namespace WeatherIntegrationDef {
            /**
             * Arguments for Weather
             */
            interface Arguments {
                location: string;
            }
            /**
             * Integration definition for Weather
             */
            interface Setup {
                openweathermap_api_key: string;
            }
        }
        /**
         * browserbase context provider
         */
        interface BrowserbaseContextIntegrationDef {
            arguments?: BrowserbaseContextIntegrationDef.Arguments | null;
            method?: 'create_context';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseContextIntegrationDef.Setup | null;
        }
        namespace BrowserbaseContextIntegrationDef {
            interface Arguments {
                projectId: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase extension provider
         */
        interface BrowserbaseExtensionIntegrationDef {
            arguments?: BrowserbaseExtensionIntegrationDef.Arguments | null;
            method?: 'install_extension_from_github' | null;
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseExtensionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseExtensionIntegrationDef {
            interface Arguments {
                repositoryName: string;
                ref?: string | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase list sessions integration definition
         */
        interface BrowserbaseListSessionsIntegrationDef {
            arguments?: BrowserbaseListSessionsIntegrationDef.Arguments | null;
            method?: 'list_sessions';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseListSessionsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseListSessionsIntegrationDef {
            interface Arguments {
                status?: 'RUNNING' | 'ERROR' | 'TIMED_OUT' | 'COMPLETED' | null;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase create session integration definition
         */
        interface BrowserbaseCreateSessionIntegrationDef {
            arguments?: BrowserbaseCreateSessionIntegrationDef.Arguments | null;
            method?: 'create_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCreateSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCreateSessionIntegrationDef {
            interface Arguments {
                browserSettings?: unknown;
                extensionId?: string | null;
                keepAlive?: boolean;
                projectId?: string | null;
                proxies?: boolean | Array<unknown>;
                timeout?: number;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session integration definition
         */
        interface BrowserbaseGetSessionIntegrationDef {
            arguments?: BrowserbaseGetSessionIntegrationDef.Arguments | null;
            method?: 'get_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase complete session integration definition
         */
        interface BrowserbaseCompleteSessionIntegrationDef {
            arguments?: BrowserbaseCompleteSessionIntegrationDef.Arguments | null;
            method?: 'complete_session';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseCompleteSessionIntegrationDef.Setup | null;
        }
        namespace BrowserbaseCompleteSessionIntegrationDef {
            interface Arguments {
                id: string;
                status?: 'REQUEST_RELEASE';
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * browserbase get session live urls integration definition
         */
        interface BrowserbaseGetSessionLiveURLsIntegrationDef {
            arguments?: BrowserbaseGetSessionLiveURLsIntegrationDef.Arguments | null;
            method?: 'get_live_urls';
            provider?: 'browserbase';
            /**
             * The setup parameters for the browserbase integration
             */
            setup?: BrowserbaseGetSessionLiveURLsIntegrationDef.Setup | null;
        }
        namespace BrowserbaseGetSessionLiveURLsIntegrationDef {
            interface Arguments {
                id: string;
            }
            /**
             * The setup parameters for the browserbase integration
             */
            interface Setup {
                api_key: string;
                project_id: string;
                api_url?: string | null;
                connect_url?: string | null;
            }
        }
        /**
         * The integration definition for the remote browser
         */
        interface RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            setup: RemoteBrowserIntegrationDef.Setup;
            /**
             * The arguments for the remote browser
             */
            arguments?: RemoteBrowserIntegrationDef.Arguments | null;
            method?: 'perform_action';
            provider?: 'remote_browser';
        }
        namespace RemoteBrowserIntegrationDef {
            /**
             * The setup parameters for the remote browser
             */
            interface Setup {
                connect_url?: string | null;
                height?: number | null;
                width?: number | null;
            }
            /**
             * The arguments for the remote browser
             */
            interface Arguments {
                action: 'key' | 'type' | 'mouse_move' | 'left_click' | 'left_click_drag' | 'right_click' | 'middle_click' | 'double_click' | 'screenshot' | 'cursor_position' | 'navigate' | 'refresh';
                connect_url?: string | null;
                coordinate?: Array<unknown> | null;
                text?: string | null;
            }
        }
        /**
         * LlamaParse integration definition
         */
        interface LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            arguments?: LlamaParseIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'llama_parse';
            /**
             * Setup parameters for LlamaParse integration
             */
            setup?: LlamaParseIntegrationDef.Setup | null;
        }
        namespace LlamaParseIntegrationDef {
            /**
             * Arguments for LlamaParse integration
             */
            interface Arguments {
                file: string | Array<string>;
                base64?: boolean;
                filename?: string | null;
                params?: unknown | null;
            }
            /**
             * Setup parameters for LlamaParse integration
             */
            interface Setup {
                llamaparse_api_key: string;
                params?: unknown | null;
            }
        }
        /**
         * Ffmpeg integration definition
         */
        interface FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            arguments?: FfmpegIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'ffmpeg';
            setup?: unknown;
        }
        namespace FfmpegIntegrationDef {
            /**
             * Arguments for Ffmpeg CMD
             */
            interface Arguments {
                cmd: string;
                file?: string | Array<string> | null;
            }
        }
        /**
         * Cloudinary upload integration definition
         */
        interface CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            arguments?: CloudinaryUploadIntegrationDef.Arguments | null;
            method?: 'media_upload';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryUploadIntegrationDef.Setup | null;
        }
        namespace CloudinaryUploadIntegrationDef {
            /**
             * Arguments for Cloudinary media upload
             */
            interface Arguments {
                file: string;
                public_id?: string | null;
                return_base64?: boolean;
                upload_params?: unknown | null;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Cloudinary edit integration definition
         */
        interface CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            arguments?: CloudinaryEditIntegrationDef.Arguments | null;
            method?: 'media_edit';
            provider?: 'cloudinary';
            /**
             * Setup parameters for Cloudinary integration
             */
            setup?: CloudinaryEditIntegrationDef.Setup | null;
        }
        namespace CloudinaryEditIntegrationDef {
            /**
             * Arguments for Cloudinary media edit
             */
            interface Arguments {
                public_id: string;
                transformation: Array<unknown>;
                return_base64?: boolean;
            }
            /**
             * Setup parameters for Cloudinary integration
             */
            interface Setup {
                cloudinary_api_key: string;
                cloudinary_api_secret: string;
                cloudinary_cloud_name: string;
                params?: unknown | null;
            }
        }
        /**
         * Arxiv integration definition
         */
        interface ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            arguments?: ArxivIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'arxiv';
            setup?: unknown;
        }
        namespace ArxivIntegrationDef {
            /**
             * Arguments for Arxiv Search
             */
            interface Arguments {
                query: string;
                download_pdf?: boolean;
                id_list?: Array<string> | null;
                max_results?: number;
                sort_by?: 'relevance' | 'lastUpdatedDate' | 'submittedDate';
                sort_order?: 'ascending' | 'descending';
            }
        }
        /**
         * Unstructured integration definition
         */
        interface UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            arguments?: UnstructuredIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'unstructured';
            /**
             * Setup parameters for Unstructured integration
             */
            setup?: UnstructuredIntegrationDef.Setup | null;
        }
        namespace UnstructuredIntegrationDef {
            /**
             * Arguments for Unstructured partition integration
             */
            interface Arguments {
                file: string;
                filename?: string | null;
                partition_params?: unknown | null;
            }
            /**
             * Setup parameters for Unstructured integration
             */
            interface Setup {
                unstructured_api_key: string;
                retry_config?: unknown | null;
                server?: string | null;
                server_url?: string | null;
                timeout_ms?: number | null;
                url_params?: unknown | null;
            }
        }
        /**
         * Algolia integration definition
         */
        interface AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            arguments?: AlgoliaIntegrationDef.Arguments | null;
            method?: string | null;
            provider?: 'algolia';
            /**
             * Integration definition for Algolia
             */
            setup?: AlgoliaIntegrationDef.Setup | null;
        }
        namespace AlgoliaIntegrationDef {
            /**
             * Arguments for Algolia Search
             */
            interface Arguments {
                index_name: string;
                query: string;
                attributes_to_retrieve?: Array<string> | null;
                hits_per_page?: number;
            }
            /**
             * Integration definition for Algolia
             */
            interface Setup {
                algolia_api_key: string;
                algolia_application_id: string;
            }
        }
        /**
         * System definition
         */
        interface System {
            operation: 'create' | 'update' | 'patch' | 'create_or_update' | 'embed' | 'change_status' | 'search' | 'chat' | 'history' | 'delete' | 'get' | 'list';
            resource: 'agent' | 'user' | 'task' | 'execution' | 'doc' | 'session' | 'job';
            arguments?: unknown | null;
            resource_id?: string | null;
            subresource?: 'tool' | 'doc' | 'execution' | 'transition' | null;
        }
        interface TextEditor20241022 {
            name?: string;
            type?: 'text_editor_20241022';
        }
    }
}
export declare namespace Tasks {
    export { type Task as Task, TasksOffsetPagination as TasksOffsetPagination, type TaskCreateParams as TaskCreateParams, type TaskListParams as TaskListParams, type TaskCreateOrUpdateParams as TaskCreateOrUpdateParams, };
}
//# sourceMappingURL=tasks.d.ts.map