import { APIResource } from "../../resource.js";
import * as Core from "../../core.js";
import * as TransitionsAPI from "./transitions.js";
import { TransitionListParams, TransitionStreamParams, TransitionStreamResponse, Transitions } from "./transitions.js";
import { OffsetPagination, type OffsetPaginationParams } from "../../pagination.js";
export declare class Executions extends APIResource {
    transitions: TransitionsAPI.Transitions;
    /**
     * Create Task Execution
     */
    create(taskId: string, body: ExecutionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Execution>;
    /**
     * List Task Executions
     */
    list(taskId: string, query?: ExecutionListParams, options?: Core.RequestOptions): Core.PagePromise<ExecutionsOffsetPagination, Execution>;
    list(taskId: string, options?: Core.RequestOptions): Core.PagePromise<ExecutionsOffsetPagination, Execution>;
    /**
     * Update Execution
     */
    changeStatus(executionId: string, body: ExecutionChangeStatusParams, options?: Core.RequestOptions): Core.APIPromise<unknown>;
    /**
     * Get Execution Details
     */
    get(executionId: string, options?: Core.RequestOptions): Core.APIPromise<Execution>;
}
export declare class ExecutionsOffsetPagination extends OffsetPagination<Execution> {
}
export declare class TransitionsOffsetPagination extends OffsetPagination<Transition> {
}
export interface Execution {
    id: string;
    created_at: string;
    input: unknown;
    status: 'queued' | 'starting' | 'running' | 'awaiting_input' | 'succeeded' | 'failed' | 'cancelled';
    task_id: string;
    updated_at: string;
    error?: string | null;
    metadata?: unknown | null;
    output?: unknown;
    transition_count?: number | null;
}
export interface Transition {
    id: string;
    created_at: string;
    current: Transition.Current;
    execution_id: string;
    next: Transition.Next | null;
    output: unknown;
    type: 'init' | 'init_branch' | 'finish' | 'finish_branch' | 'wait' | 'resume' | 'error' | 'step' | 'cancelled';
    updated_at: string;
    metadata?: unknown | null;
    step_label?: string | null;
}
export declare namespace Transition {
    interface Current {
        scope_id: string;
        step: number;
        workflow: string;
    }
    interface Next {
        scope_id: string;
        step: number;
        workflow: string;
    }
}
export type ExecutionChangeStatusResponse = unknown;
export interface ExecutionCreateParams {
    input: unknown;
    error?: string | null;
    metadata?: unknown | null;
    output?: unknown;
    transition_count?: number | null;
}
export interface ExecutionListParams extends OffsetPaginationParams {
    direction?: 'asc' | 'desc';
    sort_by?: 'created_at' | 'updated_at';
}
export type ExecutionChangeStatusParams = ExecutionChangeStatusParams.ResumeExecutionRequest | ExecutionChangeStatusParams.StopExecutionRequest;
export declare namespace ExecutionChangeStatusParams {
    interface ResumeExecutionRequest {
        input?: unknown | null;
        status?: 'running';
    }
    interface StopExecutionRequest {
        reason?: string | null;
        status?: 'cancelled';
    }
}
export declare namespace Executions {
    export { type Execution as Execution, type Transition as Transition, type ExecutionChangeStatusResponse as ExecutionChangeStatusResponse, ExecutionsOffsetPagination as ExecutionsOffsetPagination, type ExecutionCreateParams as ExecutionCreateParams, type ExecutionListParams as ExecutionListParams, type ExecutionChangeStatusParams as ExecutionChangeStatusParams, };
    export { Transitions as Transitions, type TransitionStreamResponse as TransitionStreamResponse, type TransitionListParams as TransitionListParams, type TransitionStreamParams as TransitionStreamParams, };
}
//# sourceMappingURL=executions.d.ts.map