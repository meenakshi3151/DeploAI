"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnprocessableEntityError = exports.PermissionDeniedError = exports.InternalServerError = exports.AuthenticationError = exports.BadRequestError = exports.RateLimitError = exports.ConflictError = exports.NotFoundError = exports.APIUserAbortError = exports.APIConnectionTimeoutError = exports.APIConnectionError = exports.APIError = exports.JulepError = exports.fileFromPath = exports.toFile = exports.Julep = void 0;
const qs = __importStar(require("./internal/qs/index.js"));
const Core = __importStar(require("./core.js"));
const Errors = __importStar(require("./error.js"));
const Pagination = __importStar(require("./pagination.js"));
const Uploads = __importStar(require("./uploads.js"));
const API = __importStar(require("./resources/index.js"));
const docs_1 = require("./resources/docs.js");
const files_1 = require("./resources/files.js");
const jobs_1 = require("./resources/jobs.js");
const sessions_1 = require("./resources/sessions.js");
const tasks_1 = require("./resources/tasks.js");
const agents_1 = require("./resources/agents/agents.js");
const executions_1 = require("./resources/executions/executions.js");
const users_1 = require("./resources/users/users.js");
const environments = {
    production: 'https://api.julep.ai/api',
    dev: 'https://dev.julep.ai/api',
    local_multi_tenant: 'http://localhost/api',
    local: 'http://localhost:8080',
};
/**
 * API Client for interfacing with the Julep API.
 */
class Julep extends Core.APIClient {
    /**
     * API Client for interfacing with the Julep API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['JULEP_API_KEY'] ?? undefined]
     * @param {Environment} [opts.environment=production] - Specifies the environment URL to use for the API.
     * @param {string} [opts.baseURL=process.env['JULEP_BASE_URL'] ?? https://api.julep.ai/api] - Override the default base URL for the API.
     * @param {number} [opts.timeout=2 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=5] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('JULEP_BASE_URL'), apiKey = Core.readEnv('JULEP_API_KEY'), ...opts } = {}) {
        if (apiKey === undefined) {
            throw new Errors.JulepError("The JULEP_API_KEY environment variable is missing or empty; either provide it, or instantiate the Julep client with an apiKey option, like new Julep({ apiKey: 'My API Key' }).");
        }
        const options = {
            apiKey,
            ...opts,
            baseURL,
            environment: opts.environment ?? 'production',
        };
        if (baseURL && opts.environment) {
            throw new Errors.JulepError('Ambiguous URL; The `baseURL` option (or JULEP_BASE_URL env var) and the `environment` option are given. If you want to use the environment you must pass baseURL: null');
        }
        super({
            baseURL: options.baseURL || environments[options.environment || 'production'],
            timeout: options.timeout ?? 120000 /* 2 minutes */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.agents = new API.Agents(this);
        this.files = new API.Files(this);
        this.sessions = new API.Sessions(this);
        this.users = new API.Users(this);
        this.jobs = new API.Jobs(this);
        this.docs = new API.Docs(this);
        this.tasks = new API.Tasks(this);
        this.executions = new API.Executions(this);
        this._options = options;
        this.apiKey = apiKey;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.apiKey}` };
    }
    stringifyQuery(query) {
        return qs.stringify(query, { allowDots: true, arrayFormat: 'repeat' });
    }
}
exports.Julep = Julep;
_a = Julep;
Julep.Julep = _a;
Julep.DEFAULT_TIMEOUT = 120000; // 2 minutes
Julep.JulepError = Errors.JulepError;
Julep.APIError = Errors.APIError;
Julep.APIConnectionError = Errors.APIConnectionError;
Julep.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
Julep.APIUserAbortError = Errors.APIUserAbortError;
Julep.NotFoundError = Errors.NotFoundError;
Julep.ConflictError = Errors.ConflictError;
Julep.RateLimitError = Errors.RateLimitError;
Julep.BadRequestError = Errors.BadRequestError;
Julep.AuthenticationError = Errors.AuthenticationError;
Julep.InternalServerError = Errors.InternalServerError;
Julep.PermissionDeniedError = Errors.PermissionDeniedError;
Julep.UnprocessableEntityError = Errors.UnprocessableEntityError;
Julep.toFile = Uploads.toFile;
Julep.fileFromPath = Uploads.fileFromPath;
Julep.Agents = agents_1.Agents;
Julep.AgentsOffsetPagination = agents_1.AgentsOffsetPagination;
Julep.Files = files_1.Files;
Julep.Sessions = sessions_1.Sessions;
Julep.SessionsOffsetPagination = sessions_1.SessionsOffsetPagination;
Julep.Users = users_1.Users;
Julep.UsersOffsetPagination = users_1.UsersOffsetPagination;
Julep.Jobs = jobs_1.Jobs;
Julep.Docs = docs_1.Docs;
Julep.Tasks = tasks_1.Tasks;
Julep.TasksOffsetPagination = tasks_1.TasksOffsetPagination;
Julep.Executions = executions_1.Executions;
Julep.ExecutionsOffsetPagination = executions_1.ExecutionsOffsetPagination;
var uploads_1 = require("./uploads.js");
Object.defineProperty(exports, "toFile", { enumerable: true, get: function () { return uploads_1.toFile; } });
Object.defineProperty(exports, "fileFromPath", { enumerable: true, get: function () { return uploads_1.fileFromPath; } });
var error_1 = require("./error.js");
Object.defineProperty(exports, "JulepError", { enumerable: true, get: function () { return error_1.JulepError; } });
Object.defineProperty(exports, "APIError", { enumerable: true, get: function () { return error_1.APIError; } });
Object.defineProperty(exports, "APIConnectionError", { enumerable: true, get: function () { return error_1.APIConnectionError; } });
Object.defineProperty(exports, "APIConnectionTimeoutError", { enumerable: true, get: function () { return error_1.APIConnectionTimeoutError; } });
Object.defineProperty(exports, "APIUserAbortError", { enumerable: true, get: function () { return error_1.APIUserAbortError; } });
Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function () { return error_1.NotFoundError; } });
Object.defineProperty(exports, "ConflictError", { enumerable: true, get: function () { return error_1.ConflictError; } });
Object.defineProperty(exports, "RateLimitError", { enumerable: true, get: function () { return error_1.RateLimitError; } });
Object.defineProperty(exports, "BadRequestError", { enumerable: true, get: function () { return error_1.BadRequestError; } });
Object.defineProperty(exports, "AuthenticationError", { enumerable: true, get: function () { return error_1.AuthenticationError; } });
Object.defineProperty(exports, "InternalServerError", { enumerable: true, get: function () { return error_1.InternalServerError; } });
Object.defineProperty(exports, "PermissionDeniedError", { enumerable: true, get: function () { return error_1.PermissionDeniedError; } });
Object.defineProperty(exports, "UnprocessableEntityError", { enumerable: true, get: function () { return error_1.UnprocessableEntityError; } });
exports = module.exports = Julep;
exports.default = Julep;
//# sourceMappingURL=index.js.map